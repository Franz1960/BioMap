@page "/lists/size_time_chart"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject IJSRuntime JSRuntime
@using BioMap
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util

<h1>@Localize["Length / Time Chart"]</h1>

<div class="container">
  <div class="row">
    <div class="col">
      <CheckBox @ref="CheckBoxFit" LabelText=@Localize["Fit growing curves"] OnAnyChangedCallback="@CheckBoxFit_CheckedChanged" />
    </div>
    <div class="col">
      @if (CheckBoxFit!=null && CheckBoxFit.Checked) {
        <CheckBox @ref="CheckBoxIncludeSinglePoints" LabelText=@Localize["Include single catches"] OnAnyChangedCallback="@CheckBoxIncludeSinglePoints_CheckedChanged" />
      }
    </div>
    <div class="col">
      @if (CheckBoxFit!=null && CheckBoxFit.Checked && CheckBoxIncludeSinglePoints!=null && CheckBoxIncludeSinglePoints.Checked) {
        <button @onclick="()=>OnSaveYoBClick()">@Localize["Save calculated year-of-birth values"]</button>
      }
    </div>
  </div>
</div>

<ChartJsLineChart @ref="_chartJs" Config="@_config" Width="600" Height="300" />

@code {
  private LineConfig _config;
  private ChartJsLineChart _chartJs;
  private CheckBox CheckBoxFit;
  private CheckBox CheckBoxIncludeSinglePoints;
  private bool SaveYoB = false;

  protected override void OnInitialized() {
    base.OnInitialized();
    _config = new LineConfig
    {
      Options = new LineOptions
      {
        Animation=new Animation
        {
          Duration=0,
        },
        Title = new OptionsTitle
        {
          Text="XXX",
          Display = false,
        },
        Legend = new Legend
        {
          Display = false,
        },
        Scales = new Scales
        {
          xAxes = new List<CartesianAxis>
          {
            new TimeAxis
            {
              Distribution = TimeDistribution.Linear,
              Time = new TimeOptions
              {
                Unit = TimeMeasurement.Month,
                Round = TimeMeasurement.Day,
                TooltipFormat = "DD.MM.YYYY HH:mm:ss",
              },
              ScaleLabel = new ScaleLabel
              {
                LabelString = "Time"
              }
            }
          }
        },
      },
    };
    DS.Filter.FilterChanged+=(sender,ev) =>
    {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void CheckBoxFit_CheckedChanged(EventArgs e) {
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void CheckBoxIncludeSinglePoints_CheckedChanged(EventArgs e) {
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void OnSaveYoBClick() {
    this.SaveYoB=true;
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void RefreshData() {
    var dtProjectStart = DS.ProjectStart;
    var aaIndisByIId = DS.GetIndividuals();
    _config.Options.Legend.Display=false;
    _config.Data.Datasets.Clear();
    // Ideale Wachstumskurven hinzufügen.
    for (int nYoB = 2012;nYoB<2021;nYoB++) {
      string sYobColor = Element.GetColorForYearOfBirth(nYoB);
      var lineSet = new LineDataset<TimeTuple<double>>
      {
        BackgroundColor = sYobColor,
        BorderWidth = 4,
        BorderDash= new[] { 10,5 },
        PointHoverBorderWidth = 4,
        BorderColor = sYobColor,
        PointRadius = 0,
        CubicInterpolationMode = CubicInterpolationMode.Monotone,
        //ShowLine = true,
      };
      var fg = new GrowthFunc()
      {
        DateOfBirth=new DateTime(nYoB,1,1),
      };
      for (var dt = dtProjectStart;dt<new DateTime(2020,11,1);dt+=TimeSpan.FromDays(7)) {
        try {
          var l = fg.GetSize(dt);
          var t = new Moment(dt);
          if (l > 10) {
            lineSet.Add(new TimeTuple<double>(t,l));
          }
        } catch { }
      }
      if (lineSet.Data.Count>=2) {
        _config.Data.Datasets.Add(lineSet);
      }
    }
    // Wachstumskurven der Individuen hinzufügen.
    foreach (var idx in aaIndisByIId.Keys) {
      try {
        if (this.CheckBoxFit!=null && this.CheckBoxFit.Checked) {
          // Gefittete Wachstumskurve.
          bool bIncludeSinglePoints = (this.CheckBoxIncludeSinglePoints!=null && this.CheckBoxIncludeSinglePoints.Checked);
          DateTime? dtFittedYearOfBirth = null;
          var lsf = new LeastSquareFit();
          if (aaIndisByIId[idx].Count>=(bIncludeSinglePoints ? 1 : 2)) {
            var ldaPoints = new List<double[]>();
            foreach (var el in aaIndisByIId[idx]) {
              try {
                var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
                if (l!=0) {
                  double t = Utilities.Years_from_DateTime(el.ElementProp.CreationTime);
                  ldaPoints.Add(new double[] { t,l });
                }
              } catch { }
            }
            if (ldaPoints.Count>=(bIncludeSinglePoints ? 1 : 2)) {
              lsf.Optimize(
                new double[][] { new double[] { 2010,2025 } },
                ldaPoints.ToArray(),
                (daParams,daaPoints) =>
                {
                  double yearsBirth = daParams[0];
                  var fg = new GrowthFunc()
                  {
                    DateOfBirth=Utilities.DateTime_from_Years(yearsBirth),
                  };
                  double dDevSum = 0;
                  for (int i = 0;i<daaPoints.Length;i++) {
                    double years = daaPoints[i][0];
                    double lCalc = fg.GetSize(years);
                    double lReal = daaPoints[i][1];
                    double dDev = lReal-lCalc;
                    // Daten aus der Jugend werden stärker gewichtet.
                    //dDevSum+=(dDev*dDev)/Math.Max(0.5,years-yearsBirth);
                    dDevSum+=(dDev*dDev);
                  }
                  return dDevSum;
                },
                0.5,
                0.001,
                out double[] daBestParams,
                LeastSquareFit.Method.RandomThenMonotone);
              dtFittedYearOfBirth = Utilities.DateTime_from_Years(daBestParams[0]);
              if (this.SaveYoB) {
                foreach (var el in aaIndisByIId[idx].ToArray()) {
                  try {
                    el.ElementProp.IndivData.YearOfBirth=dtFittedYearOfBirth.Value.Year;
                    DS.WriteElement(el);
                  } catch { }
                }
              }
              var growthFunc = new GrowthFunc()
              {
                DateOfBirth=dtFittedYearOfBirth.Value,
              };
              string sYobColor = Element.GetColorForYearOfBirth(dtFittedYearOfBirth.Value.Year);
              var lineSetCurve = new LineDataset<TimeTuple<double>>
              {
                BackgroundColor = sYobColor,
                BorderWidth = 2,
                PointHoverBorderWidth = 0,
                BorderColor = sYobColor,
                PointRadius = 0,
                CubicInterpolationMode = CubicInterpolationMode.Monotone,
                Label="YoB: "+dtFittedYearOfBirth?.ToString("yyyy-MM-dd"),
              };
              {
                var dtB = aaIndisByIId[idx][0].ElementProp.CreationTime;
                if (bIncludeSinglePoints && dtFittedYearOfBirth.HasValue) {
                  dtB=(dtProjectStart<dtFittedYearOfBirth.Value) ? dtFittedYearOfBirth.Value : dtProjectStart;
                }
                var dtE = aaIndisByIId[idx][aaIndisByIId[idx].Count-1].ElementProp.CreationTime;
                var tsT = (dtE-TimeSpan.FromSeconds(30))-dtB;
                int nSteps = Math.Max(1,(int)Math.Ceiling(tsT/TimeSpan.FromDays(7)));
                var tsDelta = new TimeSpan(tsT.Ticks/nSteps);
                for (var dt = dtB;dt<=dtE;dt+=tsDelta) {
                  try {
                    var l = growthFunc.GetSize(dt);
                    var t = new Moment(dt);
                    if (l > 10) {
                      lineSetCurve.Add(new TimeTuple<double>(t,l));
                    }
                  } catch { }
                }
              }
              if (lineSetCurve.Data.Count>=2) {
                _config.Data.Datasets.Add(lineSetCurve);
                //_config.Options.Legend.Display=true;
              }
            }
          }
          // Datenpunkte.
          {
            string sYobColor = Element.GetColorForYearOfBirth(dtFittedYearOfBirth.HasValue ? dtFittedYearOfBirth.Value.Year : aaIndisByIId[idx][0].ElementProp.IndivData?.YearOfBirth);
            var lineSetPoints = new LineDataset<TimeTuple<double>>
            {
              BackgroundColor = sYobColor,
              BorderWidth = 0,
              PointHoverBorderWidth = 4,
              BorderColor = sYobColor,
              PointRadius = 3,
              ShowLine = false,
            };
            foreach (var el in aaIndisByIId[idx]) {
              try {
                var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
                if (l>0) {
                  var t = new Moment(el.ElementProp.CreationTime);
                  lineSetPoints.Add(new TimeTuple<double>(t,l));
                }
              } catch { }
            }
            if (lineSetPoints.Data.Count>=1) {
              _config.Data.Datasets.Add(lineSetPoints);
            }
          }
        } else {
          // Interpolation durch Datenpunkte.
          string sYobColor = aaIndisByIId[idx][0].GetColorForYearOfBirth();
          var lineSet = new LineDataset<TimeTuple<double>>
          {
            BackgroundColor = sYobColor,
            BorderWidth = 2,
            PointHoverBorderWidth = 4,
            BorderColor = sYobColor,
            PointRadius = 3,
            CubicInterpolationMode = CubicInterpolationMode.Monotone,
            //ShowLine = true,
          };
          foreach (var el in aaIndisByIId[idx]) {
            try {
              var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
              if (l!=0) {
                var t = new Moment(el.ElementProp.CreationTime);
                lineSet.Add(new TimeTuple<double>(t,l));
              }
            } catch { }
          }
          if (lineSet.Data.Count>=1) {
            _config.Data.Datasets.Add(lineSet);
          }
        }
      } catch {
      }
    }
    this.SaveYoB=false;
  }
}
