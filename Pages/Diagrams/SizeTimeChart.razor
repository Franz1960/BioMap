@page "/Charts/SizeTimeChart"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Util

<FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Individuals" />

<h1>@Localize["Length / Time Chart"]</h1>

<div class="container">
  <div class="row">
    <div class="col">
      <CheckBox Checked="@SD.SizeTimeChartShowGrowingCurves" LabelText=@Localize["Show growing curves"] OnAnyChangedCallback="@CheckBoxShowGrowingCurves_CheckedChanged" />
    </div>
    <div class="col">
      @if (SD.SizeTimeChartShowGrowingCurves) {
        <CheckBox Checked="@SD.SizeTimeChartIncludeSinglePoints" LabelText=@Localize["Include single catches"] OnAnyChangedCallback="@CheckBoxIncludeSinglePoints_CheckedChanged" />
      }
    </div>
    <div class="col">
      @if (SD.SizeTimeChartShowGrowingCurves) {
        <CheckBox Checked="@SD.SizeTimeChartFit" LabelText=@Localize["Fit growing curves"] OnAnyChangedCallback="@CheckBoxFit_CheckedChanged" />
      }
    </div>
    <div class="col">
      @if (SD.SizeTimeChartFit && SD.SizeTimeChartIncludeSinglePoints) {
        <button @onclick="()=>OnSaveYoBClick()">@Localize["Save calculated year-of-birth values"]</button>
      }
    </div>
  </div>
</div>

<Chart @ref="_chartJs" Config="@_config" Width="600" Height="300" />

@code {
  private LineConfig _config;
  private Chart _chartJs;
  private bool SaveYoB = false;

  protected override void OnInitialized() {
    base.OnInitialized();
    _config = new LineConfig {
      Options = new LineOptions {
        Animation=new Animation {
          Duration=0,
        },
        Title = new OptionsTitle {
          Text="XXX",
          Display = false,
        },
        Legend = new Legend {
          Display = false,
        },
        Scales = new Scales {
          XAxes = new List<CartesianAxis>
          {
            new TimeAxis
            {
              ScaleLabel = new ScaleLabel
              {
                LabelString = Localize["Time"]
              },
              Time = new TimeOptions
              {
                Unit = TimeMeasurement.Month,
                Round = TimeMeasurement.Day,
                TooltipFormat = "DD.MM.YYYY",
              },
            }
          }
        },
      },
    };
    SD.Filters.FilterChanged+=(sender,ev) => {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void CheckBoxShowGrowingCurves_CheckedChanged(ChangeEventArgs e) {
    SD.SizeTimeChartShowGrowingCurves=bool.Parse(e.Value.ToString());
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void CheckBoxFit_CheckedChanged(ChangeEventArgs e) {
    SD.SizeTimeChartFit=bool.Parse(e.Value.ToString());
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void CheckBoxIncludeSinglePoints_CheckedChanged(ChangeEventArgs e) {
    SD.SizeTimeChartIncludeSinglePoints=bool.Parse(e.Value.ToString());
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void OnSaveYoBClick() {
    this.SaveYoB=true;
    RefreshData();
    base.InvokeAsync(StateHasChanged);
  }
  private void RefreshData() {
    var dtProjectStart = DS.ProjectStart;
    var aaIndisByIId = DS.GetIndividuals(SD.Filters);
    _config.Data.Datasets.Clear();
    // Ideale Wachstumskurven hinzufügen.
    for (int nYoB = 2012;nYoB<2021;nYoB++) {
      string sYobColor = Element.GetColorForYearOfBirth(nYoB);
      var lineSet = new LineDataset<TimePoint> {
        BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
        BorderWidth = 4,
        BorderDash= new[] { 10,5 },
        PointHoverBorderWidth = 4,
        BorderColor = sYobColor,
        PointRadius = 0,
        CubicInterpolationMode = CubicInterpolationMode.Monotone,
        Fill=FillingMode.Disabled,
        //ShowLine = true,
      };
      var fg = new GrowthFunc() {
        DateOfBirth=new DateTime(nYoB,1,1)+TimeSpan.FromDays(GrowthFunc.SeasonStartDay-GrowthFunc.MaxAddDaysInFirstSeason),
      };
      for (var dt = dtProjectStart;dt<new DateTime(DateTime.Now.Year,11,1);dt+=TimeSpan.FromDays(7)) {
        try {
          var l = fg.GetSize(dt);
          if (l > 10) {
            lineSet.Add(new TimePoint(dt,l));
          }
        } catch { }
      }
      if (lineSet.Data.Count>=2) {
        _config.Data.Datasets.Add(lineSet);
      }
    }
#if trueX
// Kurvenschar hinzufügen.
for (var dtB = new DateTime(2012,1,1);dtB.Year<2021;dtB+=TimeSpan.FromDays(7)) {
string sYobColor = Element.GetColorForYearOfBirth(dtB.Year);
var lineSet = new LineDataset<TimePoint> {
  BackgroundColor = sYobColor,
  BorderWidth = 2,
  PointHoverBorderWidth = 4,
  BorderColor = sYobColor,
  PointRadius = 0,
  CubicInterpolationMode = CubicInterpolationMode.Monotone,
  Fill=FillingMode.Disabled,
  //ShowLine = true,
};
var fg = new GrowthFunc() {
  DateOfBirth=dtB,
};
//for (var dt = dtProjectStart;dt<new DateTime(2020,11,1);dt+=TimeSpan.FromDays(7)) {
for (var dt = new DateTime(2015,11,1);dt<new DateTime(2020,11,1);dt+=TimeSpan.FromDays(7)) {
  try {
    var l = fg.GetSize(dt);
    if (l > 10) {
      lineSet.Add(new TimePoint(dt,l));
    }
  } catch { }
}
if (lineSet.Data.Count>=2) {
  _config.Data.Datasets.Add(lineSet);
}
}
#endif
    // Wachstumskurven der Individuen hinzufügen.
    foreach (var idx in aaIndisByIId.Keys) {
      try {
        if (SD.SizeTimeChartShowGrowingCurves) {
          // Gefittete Wachstumskurve.
          bool bIncludeSinglePoints = (SD.SizeTimeChartIncludeSinglePoints);
          DateTime? dtFittedYearOfBirth = null;
          var lsf = new LeastSquareFit();
          if (aaIndisByIId[idx].Count>=(bIncludeSinglePoints ? 1 : 2)) {
            DateTime? dtDateOfBirth = null;
            var ldaPoints = new List<double[]>();
            foreach (var el in aaIndisByIId[idx]) {
              try {
                var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
                if (l!=0) {
                  double t = Utilities.Years_from_DateTime(el.ElementProp.CreationTime);
                  ldaPoints.Add(new double[] { t,l });
                  dtDateOfBirth=el.ElementProp.IndivData?.DateOfBirth;
                }
              } catch { }
            }
            if (ldaPoints.Count>=(bIncludeSinglePoints ? 1 : 2)) {
              if (SD.SizeTimeChartFit) {
                var dtFirstPoint = Utilities.DateTime_from_Years(ldaPoints[0][0]);
                double? dMinYear = null;
                var dFirstLength = ldaPoints[0][1];
                var dtEarliestHatchTimeInFirstYear = new DateTime(dtFirstPoint.Year,1,1)+TimeSpan.FromDays(GrowthFunc.SeasonStartDay-GrowthFunc.MaxAddDaysInFirstSeason);
                double dMaxLengthFirstYear = GrowthFunc.GetSizeForNetGrowingTime(((double)(dtFirstPoint-dtEarliestHatchTimeInFirstYear).Days)/GrowthFunc.SeasonLengthDays);
                if (dFirstLength<dMaxLengthFirstYear) {
                  dMinYear = Utilities.Years_from_DateTime(new DateTime(dtFirstPoint.Year,1,1)+TimeSpan.FromDays(GrowthFunc.SeasonStartDay-GrowthFunc.MaxAddDaysInFirstSeason));
                }
                if (!dMinYear.HasValue) {
                  dMinYear=dtFirstPoint.Year-9;
                }
                double dMaxYear = Utilities.Years_from_DateTime(dtFirstPoint);
                lsf.Optimize(
                  new double[][] { new double[] { dMinYear.Value,dMaxYear } },
                  ldaPoints.ToArray(),
                  (daParams,daaPoints) => {
                    double dyTimeOfBirth = daParams[0];
                    var fg = new GrowthFunc() {
                      DateOfBirth=Utilities.DateTime_from_Years(dyTimeOfBirth),
                    };
                  //System.Diagnostics.Debug.Write(fg.DateOfBirth.ToString()+": ");
                  double dDevSum = 0;
                    for (int i = 0;i<daaPoints.Length;i++) {
                      double dyTime = daaPoints[i][0];
                      double lReal = daaPoints[i][1];
                      double lCalc = fg.GetSize(dyTime);
                      double dDev = lReal-lCalc;
                      dDevSum+=(dDev*dDev);
                    //System.Diagnostics.Debug.Write(" Dev="+ConvInvar.ToDecimalString(dDev,5));
                  }
                  //System.Diagnostics.Debug.WriteLine(" DevSum="+ConvInvar.ToDecimalString(dDevSum,5));
                  return dDevSum;
                  },
                  -0.02,
                  0.0001,
                  out double[] daBestParams,
                  LeastSquareFit.Method.Directed);
                dtFittedYearOfBirth = Utilities.DateTime_from_Years(daBestParams[0]);
                if (this.SaveYoB) {
                  foreach (var el in aaIndisByIId[idx].ToArray()) {
                    try {
                      el.ElementProp.IndivData.DateOfBirth=dtFittedYearOfBirth.Value;
                      DS.WriteElement(el);
                    } catch { }
                  }
                }
                dtDateOfBirth=dtFittedYearOfBirth.Value;
              }
              var growthFunc = new GrowthFunc() {
                DateOfBirth=dtDateOfBirth.Value,
              };
              string sYobColor = Element.GetColorForYearOfBirth(growthFunc.DateOfBirth.Year);
              var lineSetCurve = new LineDataset<TimePoint> {
                BackgroundColor = sYobColor,
                BorderWidth = 2,
                PointHoverBorderWidth = 0,
                BorderColor = sYobColor,
                PointRadius = 0,
                Fill=FillingMode.Disabled,
                CubicInterpolationMode = CubicInterpolationMode.Monotone,
                Label="YoB: "+dtFittedYearOfBirth?.ToString("yyyy-MM-dd"),
              };
              {
                var dtB = aaIndisByIId[idx][0].ElementProp.CreationTime;
                if (bIncludeSinglePoints) {
                  dtB=(dtProjectStart<growthFunc.DateOfBirth) ? growthFunc.DateOfBirth : dtProjectStart;
                }
                var dtE = aaIndisByIId[idx][aaIndisByIId[idx].Count-1].ElementProp.CreationTime;
                var tsT = (dtE-TimeSpan.FromSeconds(30))-dtB;
                int nSteps = Math.Max(1,(int)Math.Ceiling(tsT/TimeSpan.FromDays(7)));
                var tsDelta = new TimeSpan(tsT.Ticks/nSteps);
                for (var dt = dtB;dt<=dtE;dt+=tsDelta) {
                  try {
                    var l = growthFunc.GetSize(dt);
                    if (l > 10) {
                      lineSetCurve.Add(new TimePoint(dt,l));
                    }
                  } catch { }
                }
              }
              if (lineSetCurve.Data.Count>=2) {
                _config.Data.Datasets.Add(lineSetCurve);
                //_config.Options.Legend.Display=true;
              }
            }
          }
          // Datenpunkte.
          {
            string sYobColor = Element.GetColorForYearOfBirth(dtFittedYearOfBirth.HasValue ? dtFittedYearOfBirth.Value.Year : aaIndisByIId[idx][0].ElementProp.IndivData?.DateOfBirth.Year);
            var lineSetPoints = new LineDataset<TimePoint> {
              BackgroundColor = sYobColor,
              BorderWidth = 0,
              PointHoverBorderWidth = 4,
              BorderColor = sYobColor,
              PointRadius = 3,
              Fill=FillingMode.Disabled,
              ShowLine = false,
            };
            foreach (var el in aaIndisByIId[idx]) {
              try {
                var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
                if (l>0) {
                  lineSetPoints.Add(new TimePoint(el.ElementProp.CreationTime,l));
                }
              } catch { }
            }
            if (lineSetPoints.Data.Count>=1) {
              _config.Data.Datasets.Add(lineSetPoints);
            }
          }
        } else {
          // Interpolation durch Datenpunkte.
          string sYobColor = aaIndisByIId[idx][0].GetColorForYearOfBirth();
          var lineSet = new LineDataset<TimePoint> {
            BackgroundColor = sYobColor,
            BorderWidth = 2,
            PointHoverBorderWidth = 4,
            BorderColor = sYobColor,
            PointRadius = 3,
            Fill=FillingMode.Disabled,
            CubicInterpolationMode = CubicInterpolationMode.Monotone,
            //ShowLine = true,
          };
          foreach (var el in aaIndisByIId[idx]) {
            try {
              var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
              if (l!=0) {
                lineSet.Add(new TimePoint(el.ElementProp.CreationTime,l));
              }
            } catch { }
          }
          if (lineSet.Data.Count>=1) {
            _config.Data.Datasets.Add(lineSet);
          }
        }
      } catch {
      }
    }
    this.SaveYoB=false;
  }
}
