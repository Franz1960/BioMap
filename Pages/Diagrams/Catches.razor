@page "/Charts/Catches"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes

<FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Individuals" />

<h1>@Localize["Catches"]</h1>

<Row>
  <Column>
    <Card>
      <CardTitle>
        @Localize["Catch numbers per month"]
      </CardTitle>
      <CardBody>
        <Chart @ref="_chartJsPerMonth" Config="@_configPerMonth" Width="600" Height="300" />
      </CardBody>
    </Card>
  </Column>
</Row>
<Row>
  <Column>
    <Card>
      <CardTitle>
        @Localize["Head-body-length of all catches"]
      </CardTitle>
      <CardBody>
        <Chart @ref="_chartJsHeadBodyLength" Config="@_configHeadBodyLength" Width="600" Height="300" />
      </CardBody>
    </Card>
  </Column>
</Row>

@code {
  private BarConfig _configPerMonth;
  private BarConfig _configHeadBodyLength;
  private Chart _chartJsPerMonth;
  private Chart _chartJsHeadBodyLength;
  //
  protected override void OnInitialized() {
    base.OnInitialized();
    _configPerMonth = new BarConfig {
      Options = new BarOptions {
        Animation=new Animation {
          Duration=0,
        },
        Title = new OptionsTitle {
          Text="XXX",
          Display = false,
        },
        Legend = new Legend {
          Display = true,
        },
        Scales = new BarScales {
          XAxes = new List<CartesianAxis>
        {
              new BarCategoryAxis
              {
                  Stacked = true
              }
          },
          YAxes = new List<CartesianAxis>
        {
              new BarLinearCartesianAxis
              {
                  Stacked = true
              }
          }
        },
      },
    };
    _configHeadBodyLength = new BarConfig {
      Options = new BarOptions {
        Animation=new Animation {
          Duration=0,
        },
        Title = new OptionsTitle {
          Text="XXX",
          Display = false,
        },
        Legend = new Legend {
          Display = true,
        },
        Scales = new BarScales {
          XAxes = new List<CartesianAxis>
        {
              new BarCategoryAxis
              {
                  Stacked = true
              }
          },
          YAxes = new List<CartesianAxis>
        {
              new BarLinearCartesianAxis
              {
                  Stacked = true
              }
          }
        },
      },
    };
    SD.Filters.FilterChanged+=(sender,ev) => {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void RefreshData() {
    var aaIndisByIId = DS.GetIndividuals(SD.Filters);
    {
      _configPerMonth.Data.Labels.Clear();
      _configPerMonth.Data.Datasets.Clear();
      //
      int nIndex = 0;
      foreach (var indiSpec in new[] {
        new Tuple<string,Func<Element,bool>>(Localize["Hibernations"]+": 2+",(el)=>el.GetWinters()>=2),
        new Tuple<string,Func<Element,bool>>(Localize["Hibernations"]+": 1",(el)=>el.GetWinters()==1),
        new Tuple<string,Func<Element,bool>>(Localize["Hibernations"]+": 0",(el)=>el.GetWinters()==0),
      }) {
        var aCatchCountsPerMonth = new int[12];
        foreach (var ea in aaIndisByIId.Values) {
          foreach (var el in ea) {
            if (indiSpec.Item2(el)) {
              aCatchCountsPerMonth[el.ElementProp.CreationTime.Month-1]++;
            }
          }
        }
        var ds = new BarDataset<int>() {
          Label=indiSpec.Item1,
          BackgroundColor=this.GetColor(nIndex),
        };
        for (int month = 4;month<=10;month++) {
          if (nIndex==0) {
            _configPerMonth.Data.Labels.Add(month.ToString("00"));
          }
          ds.Add(aCatchCountsPerMonth[month-1]);
        }
        _configPerMonth.Data.Datasets.Add(ds);
        nIndex++;
      }
    }
    {
      _configHeadBodyLength.Data.Labels.Clear();
      _configHeadBodyLength.Data.Datasets.Clear();
      //
      int nIndex = 0;
      foreach (var indiSpec in new[] {
        new Tuple<string,Func<Element,bool>>(Localize["Hibernations"]+": 2+",(el)=>el.GetWinters()>=2),
        new Tuple<string,Func<Element,bool>>(Localize["Hibernations"]+": 1",(el)=>el.GetWinters()==1),
        new Tuple<string,Func<Element,bool>>(Localize["Hibernations"]+": 0",(el)=>el.GetWinters()==0),
      }) {
        var aCatchCountsHeadBodyLength = new int[30];
        foreach (var ea in aaIndisByIId.Values) {
          foreach (var el in ea) {
            if (indiSpec.Item2(el)) {
              aCatchCountsHeadBodyLength[Math.Min(aCatchCountsHeadBodyLength.Length-1,(int)Math.Floor(el.GetHeadBodyLengthMm()/2))]++;
            }
          }
        }
        var ds = new BarDataset<int>() {
          Label=indiSpec.Item1,
          BackgroundColor=this.GetColor(nIndex),
        };
        for (int idx = 6;idx<aCatchCountsHeadBodyLength.Length;idx++) {
          if (nIndex==0) {
            _configHeadBodyLength.Data.Labels.Add((idx*2).ToString());
          }
          ds.Add(aCatchCountsHeadBodyLength[idx]);
        }
        _configHeadBodyLength.Data.Datasets.Add(ds);
        nIndex++;
      }
    }
  }
  public string GetColor(int nIndex) {
    return _Colors[nIndex % _Colors.Length];
  }
  private string[] _Colors = new string[] {
    ChartJs.Blazor.Util.ColorUtil.FromDrawingColor(System.Drawing.Color.Green),
    ChartJs.Blazor.Util.ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
    ChartJs.Blazor.Util.ColorUtil.FromDrawingColor(System.Drawing.Color.Cyan),
    ChartJs.Blazor.Util.ColorUtil.FromDrawingColor(System.Drawing.Color.DarkMagenta),
    ChartJs.Blazor.Util.ColorUtil.FromDrawingColor(System.Drawing.Color.Magenta),
  };
}