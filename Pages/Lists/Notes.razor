@page "/Lists/Notes"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<NotePopup @ref="refNotePopup" Changed="(pe)=>{ RefreshData();StateHasChanged(); }" />

<Row>
  <Column>
    <FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Notes" />
  </Column>
</Row>
<Row>
  <Column>
    <h1>
      @Localize["Notes"]
      <Button Float="Float.Right" Color="Color.Light" Clicked="@((e)=>{ AddProtocolEntry(); })"><Icon Name="IconName.PlusCircle"></Icon></Button>
    </h1>
  </Column>
</Row>
<Row>
  <Column>
    <Table Class="table-striped">
      <TableHeader>
        <TableRow>
          <TableHeaderCell>
            <th scope="col">@Localize["Time"]<br />@Localize["Author"]</th>
          </TableHeaderCell>
          <TableHeaderCell>
            <th scope="col">@Localize["Text"]</th>
          </TableHeaderCell>
        </TableRow>
      </TableHeader>
      <TableBody>
        @foreach (var idx in Enumerable.Range(0,ProtocolEntries.Length)) {
          <TableRow>
            <TableRowCell>
              @ProtocolEntries[idx].CreationTime.ToString("yyyy-MM-dd HH:mm:ss")<br />@ProtocolEntries[idx].Author
            </TableRowCell>
            <TableRowCell>
              @((MarkupString)ProtocolEntries[idx].Text)
              <Button Float="Float.Right" Color="Color.Light" Clicked="@((e)=>{ refNotePopup.Show(ProtocolEntries[idx]); })"><Icon Name="IconName.Edit"></Icon></Button>
            </TableRowCell>
          </TableRow>
        }
      </TableBody>
    </Table>
  </Column>
</Row>
<Row>
  <Column>
  </Column>
</Row>

@code {
  private int i = 0;
  private NotePopup refNotePopup;
  private ProtocolEntry[] ProtocolEntries = new ProtocolEntry[0];
  protected override void OnInitialized() {
    base.OnInitialized();
    SD.Filters.FilterChanged+=(sender,ev) => {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void RefreshData() {
    this.ProtocolEntries = DataService.Instance.GetProtocolEntries(SD.Filters,"","notes.dt DESC");
  }
  private void AddProtocolEntry() {
    var pe = new ProtocolEntry {
      CreationTime=DateTime.Now,
      Author=SD.CurrentUser.EMail,
      Text="",
    };
    refNotePopup.Show(pe);
  }
}
