@page "/lists/size_time_chart"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject IJSRuntime JSRuntime
@using BioMap
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util

<h1>@Localize["Length / Time Chart"]</h1>

<ChartJsLineChart @ref="_chartJs" Config="@_config" Width="600" Height="300" />

@code {
  private LineConfig _config;
  private ChartJsLineChart _chartJs;

  protected override void OnInitialized() {
    _config = new LineConfig
    {
      Options = new LineOptions
      {
        Title = new OptionsTitle
        {
          Text="XXX",
        },
        Legend = new Legend
        {
          Display = false,
        },
        Scales = new Scales
        {
          xAxes = new List<CartesianAxis>
        {
            new TimeAxis
            {
              Distribution = TimeDistribution.Linear,
              Time = new TimeOptions
              {
                Unit = TimeMeasurement.Month,
                Round = TimeMeasurement.Day,
                TooltipFormat = "DD.MM.YYYY HH:mm:ss",
              },
              ScaleLabel = new ScaleLabel
              {
                LabelString = "Time"
              }
            }
          }
        },
      },
    };

    var aaIndisByIId = DS.GetIndividuals();

    foreach (var idx in aaIndisByIId.Keys) {
      string sYobColor = aaIndisByIId[idx][0].GetColorForYearOfBirth();
      var lineSet = new LineDataset<TimeTuple<double>>
      {
        BackgroundColor = sYobColor,
        BorderWidth = 2,
        PointHoverBorderWidth = 4,
        BorderColor = sYobColor,
        PointRadius = 3,
        //ShowLine = true,
      };
      foreach (var el in aaIndisByIId[idx]) {
        try {
          var l = el.ElementProp.IndivData.MeasuredData.HeadBodyLength;
          if (l!=0) {
            var t = new Moment(el.ElementProp.CreationTime);
            lineSet.Add(new TimeTuple<double>(t,l));
          }
        } catch { }
      }
      if (lineSet.Data.Count>=1) {
        _config.Data.Datasets.Add(lineSet);
      }
    }
  }
}
