@page "/Lists/AllIndividuals"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Individuals" />

<h1>@Localize["All Individuals"]</h1>

<p>Anzahl Individuen: @Individuals.Count</p>

<PhotoPopup @ref="PhotoPopup1" />

<table class="table table-striped">
  <thead>
    <tr>
      <th scope="col">IID</th>
      <th scope="col">@Localize["Vintage"]</th>
      <th scope="col">@Localize["Gender"]</th>
      <th scope="col" width="10%">@Localize["Length"]</th>
      <th scope="col">@Localize["Place"]</th>
      <th scope="col">ID</th>
      <th scope="col" width="10%">@Localize["Time"]</th>
      <th scope="col">@Localize["User"]</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var iid in Individuals.Keys) {
      <tr style=@GetTrStyle(iid)>
        <th scope="row">@(iid)</th>
        <td>
          @((MarkupString)GetForElements(iid,el=>el.GetYearOfBirthAsString(),true))
          @if (!AreYearsOfBirthConsistent(iid)) {
            <br />
            <div class="form-group">
              <input class="form-control" type="number" value="0" @onchange="(e) => inputChanged(e,iid)" />
            </div>
          }
        </td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetGender()))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetHeadBodyLengthNice()))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetPlace()?.Name))</td>
        <td>
          @foreach (var el in this.Individuals[iid]) {
            @((MarkupString)this.GetLineBreak(iid))
            <a href="javascript:void(0);" @onclick="()=>OnSelectClick(el)">@el.ElementName</a>
          }
        </td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetIsoDate()))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.ElementProp.UploadInfo.UserId))</td>
      </tr>
    }
  </tbody>
</table>

@if (SD.CurrentUser.Level>=500) {
  <Button Color="Color.Primary" Clicked="@(async (e)=>DownloadCsv_Clicked())">Download CSV</Button>
}

@code {
  private PhotoPopup PhotoPopup1;
  private Dictionary<int,List<Element>> Individuals = new Dictionary<int,List<Element>>();
  protected override void OnInitialized() {
    base.OnInitialized();
    SD.Filters.FilterChanged+=(sender,ev) => {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void RefreshData() {
    this.Individuals = DataService.Instance.GetIndividuals(SD.Filters);
  }
  private string GetForElements(int iid,Func<Element,string> func,bool bAddYoBWarning = false) {
    var sb = new System.Text.StringBuilder();
    string sPreFix = "";
    string sWarnPostfix = "";
    int? nOrigYoB = null;
    foreach (var el in this.Individuals[iid]) {
      if (!nOrigYoB.HasValue) {
        nOrigYoB=el.GetYearOfBirth();
      }
      if (bAddYoBWarning && !object.Equals(nOrigYoB,el.GetYearOfBirth())) {
        sWarnPostfix=" !!!";
      }
      sb.Append(sPreFix+func(el)+sWarnPostfix);
      sPreFix="<br/>";
    }
    return sb.ToString();
  }
  private string GetTrStyle(int iid) {
    if (this.AreGendersConsistent(iid)) {
      return "";
    } else {
      return "background-color:orange;";
    }
  }
  private string GetYoB(int iid) {
    foreach (var el in this.Individuals[iid]) {
      int? nElYoB = el.GetYearOfBirth();
      if (nElYoB.HasValue) {
        return ConvInvar.ToString(nElYoB.Value);
      }
    }
    return "";
  }
  private bool AreYearsOfBirthConsistent(int iid) {
    int nYoB = 0;
    foreach (var el in this.Individuals[iid]) {
      if (nYoB!=0) {
        if (nYoB!=el.GetYearOfBirth().Value) {
          return false;
        }
      } else {
        nYoB=el.GetYearOfBirth().Value;
      }
    }
    return true;
  }
  private bool AreGendersConsistent(int iid) {
    string sGender = null;
    foreach (var el in this.Individuals[iid]) {
      string g = el.GetGender();
      if (g=="fa" || g=="ma") {
        if (sGender==null) {
          sGender=g;
        } else if (g!=sGender) {
          return false;
        }
      } else {
        if (sGender!=null) {
          return false;
        }
      }
    }
    return true;
  }
  void inputChanged(ChangeEventArgs e,int iid) {
    int nYoB = ConvInvar.ToInt(e.Value.ToString());
    foreach (var el in this.Individuals[iid]) {
      el.ElementProp.IndivData.DateOfBirth=new DateTime(nYoB,7,1);
      DataService.Instance.WriteElement(el);
    }
  }
  private int oldIid = 0;
  private string GetLineBreak(int iid) {
    if (iid==this.oldIid) {
      return "<br/>";
    }
    this.oldIid=iid;
    return "";
  }
  private void OnSelectClick(Element el) {
    this.PhotoPopup1.Show(el);
  }
  private async void DownloadCsv_Clicked() {
    var sep = "\t";
    var csv = new System.Text.StringBuilder();
    csv.Append("IId"+sep+"TimeStamp"+sep+"GpsLat"+sep+"GpsLng"+sep+"Gender"+sep+"Length"+sep+"Traits"+sep+"Distance"+sep+"Place"+sep+"ElementName"+"\n");
    foreach (var aIndis in DS.GetIndividuals(SD.Filters)) {
      for (int idxEl=0;idxEl<aIndis.Value.Count;idxEl++) {
        var el = aIndis.Value[idxEl];
        var place = el.GetPlace();
        var sbTraits = new System.Text.StringBuilder();
        foreach (var trait in el.ElementProp.IndivData.TraitValues) {
          if (sbTraits.Length>0) {
            sbTraits.Append(",");
          }
          sbTraits.Append(trait.Value);
        }
        string sDistance="";
        if (idxEl>=1) {
          double dDistance = GeoCalculator.GetDistance(aIndis.Value[idxEl-1].ElementProp.MarkerInfo.position,el.ElementProp.MarkerInfo.position);
          sDistance=ConvInvar.ToDecimalString(dDistance,0);
        }
        csv.Append(el.GetIId());
        csv.Append(sep+'"'+el.GetIsoDateTime()+'"');
        csv.Append(sep+ConvInvar.ToDecimalString(el.ElementProp.MarkerInfo.position.lat,12));
        csv.Append(sep+ConvInvar.ToDecimalString(el.ElementProp.MarkerInfo.position.lng,12));
        csv.Append(sep+el.GetGender());
        csv.Append(sep+ConvInvar.ToDecimalString(el.GetHeadBodyLengthMm(),1));
        csv.Append(sep+'"'+sbTraits.ToString()+'"');
        csv.Append(sep+sDistance);
        csv.Append(sep+(place==null ? "" : place.Name));
        csv.Append(sep+'"'+el.ElementName+'"');
        csv.Append('\n');
      }
    }
    await JSRuntime.InvokeVoidAsync("DownloadTextFile","Individuals.csv",csv.ToString());
  }
}
