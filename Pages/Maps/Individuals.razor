@page "/Maps/Individuals"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inherits ElementMap

<Row>
  <Column>
    <FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Individuals" />
  </Column>
</Row>
<Row>
  <Column>
    <CheckBox Checked="DynaZoomed" CheckedChanged="(e)=>DynaZoomed_CheckedChanged(e)" LabelText="Dyn. Zoom"/>
  </Column>
</Row>
<PhotoPopup @ref="PhotoPopup1" />
<GoogleMap @ref="@googleMap" Id="googleMap" Options="@mapOptions" Height="100%"></GoogleMap>

@code{
  private PhotoPopup PhotoPopup1;
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    SD.Filters.FilterChanged+=async (sender,ev) => {
      await this.RefreshElementMarkers();
      await base.InvokeAsync(StateHasChanged);
    };
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
      base.PhotoPopup=this.PhotoPopup1;
      base.DynaZoomed=false;
      await this.RefreshElementMarkers();
    }
  }
  private async Task RefreshElementMarkers() {
    var lElementMarkers = new List<ElementMarker>();
    if (SD.CurrentUser.Level>=400) {
      var dictIndividuals = DataService.Instance.GetIndividuals(SD.Filters);
      foreach (var iid in dictIndividuals.Keys) {
        ElementMarker prevMarker = null;
        foreach (var el in dictIndividuals[iid]) {
          var latLng = new LatLngLiteral(el.ElementProp.MarkerInfo.position.lng,el.ElementProp.MarkerInfo.position.lat);
          var symbolProps = el.GetSymbolProperties();
          var elm = new ElementMarker {
            Position=latLng,
            Radius=symbolProps.Radius,
            Color=symbolProps.BgColor,
            Element=el,
            PrevMarker=prevMarker,
          };
          lElementMarkers.Add(elm);
          prevMarker=elm;
        }
      }
      base.ElementMarkers=lElementMarkers.ToArray();
    }
  }
  private async void DynaZoomed_CheckedChanged(bool e) {
    base.DynaZoomed=e;
    await base.InvokeAsync(StateHasChanged);
  }
}