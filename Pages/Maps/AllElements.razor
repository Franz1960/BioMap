@page "/Maps/AllElements"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inherits AreaMap

<GoogleMap @ref="@googleMap" Id="googleMap" Options="@mapOptions" Height="100%"></GoogleMap>

@code{
  protected override async void OnInitialized() {
    await base.OnInitializedAsync();
    mapOptions = new MapOptions() {
      Zoom = 12,
      Center = new LatLngLiteral() {
        Lat = 48.994249,
        Lng = 12.190451
      },
      MapTypeId = MapTypeId.Roadmap,
      StreetViewControl=false,
    };
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
      await this.RefreshElementMarkers();
    }
  }
  private async Task RefreshElementMarkers() {
    if (SD.CurrentUser.Level>=400) {
      foreach (var el in DS.GetElements(SD.Filters)) {
        var latLng = new LatLngLiteral(el.ElementProp.MarkerInfo.position.lng,el.ElementProp.MarkerInfo.position.lat);
        var symbolProps = el.GetSymbolProperties();
        var circle = await Circle.CreateAsync(googleMap.JsRuntime,new CircleOptions {
          Map=googleMap.InteropObject,
          Center=latLng,
          Radius=symbolProps.Radius,
          StrokeColor=symbolProps.FgColor,
          StrokeOpacity=0.60f,
          StrokeWeight=2,
          FillColor=symbolProps.BgColor,
          FillOpacity=0.35f,
          ZIndex=1000000,
        });
        await circle.AddListener("click",async () => {
          var s = el.ElementName;
        });
      }
    }
  }
}