@page "/Add/LocElement"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap
@using BioMap.Shared

<h1>@Localize["Located element"]</h1>

<LocationPopup @ref="LocationPopupRef" Closed="@((e)=>{ LocationPopup_Closed(e); })" />
<PhotoPopup @ref="PhotoPopupRef" />

@code {
  private LocationPopup LocationPopupRef;
  private PhotoPopup PhotoPopupRef;

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
      LocationPopupRef.Show();
    }
  }
  private async Task LocationPopup_Closed(GoogleMapsComponents.Maps.LatLngLiteral latLngLiteral) {
    var el = new Element {
      ElementName="LOC_"+DateTime.Now.ToString("yyyyMMddTHHmmssZ"),
      ElementProp=new Element.ElementProp_t {
        CreationTime=DateTime.Now,
        MarkerInfo=new Element.MarkerInfo_t {
          category=100,
          position=new LatLng {
            lat=latLngLiteral.Lat,
            lng=latLngLiteral.Lng,
          }
        },
        UploadInfo=new Element.UploadInfo_t {
          UserId=SD.CurrentUser.EMail,
          Timestamp=DateTime.Now,
          Comment="",
        },
      }
    };
    el.ElementProp.MarkerInfo.PlaceName=Place.GetNearestPlace(el.ElementProp.MarkerInfo.position).Name;
    this.PhotoPopupRef.Show(el);
  }
}
