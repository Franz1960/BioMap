@page "/Map"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<GoogleMap @ref="@googleMap" Id="googleMap" Options="@mapOptions" Height="100%"></GoogleMap>

@if (SD.CurrentUser.Level>=700) {
  <Button Color="Color.Primary" @onclick="() => OnEditClick()">@Localize["Edit AOI"]</Button>
}

@code{
  private GoogleMap googleMap;
  private MapOptions mapOptions;

  protected override void OnInitialized() {
    mapOptions = new MapOptions() {
      Zoom = 12,
      Center = new LatLngLiteral() {
        Lat = 48.994249,
        Lng = 12.190451
      },
      MapTypeId = MapTypeId.Roadmap,
      StreetViewControl=false,
    };
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      if (SD.CurrentUser.Level>=400) {
        foreach (var place in DS.AllPlaces) {
          var circle = await Circle.CreateAsync(googleMap.JsRuntime,new CircleOptions {
            Map=googleMap.InteropObject,
            Center=new LatLngLiteral(place.LatLng.lng,place.LatLng.lat),
            Radius=place.Radius,
            StrokeColor="Orange",
            StrokeOpacity=0.8f,
            StrokeWeight=3,
            FillColor="Orange",
            FillOpacity=0.02f,
          });
          var marker = await Marker.CreateAsync(googleMap.JsRuntime,new MarkerOptions {
            Map=googleMap.InteropObject,
            Position=new LatLngLiteral(place.LatLng.lng,place.LatLng.lat - 0.0000120 * place.Radius),
            Label=new MarkerLabel {
              Text=place.Name,
              FontSize="18px",
              FontWeight="bold",
              Color="DarkOrange",
            },
            Icon = "symbols/PlaceLabel.svg",
          });
          await marker.AddListener("click",async () => {
            var s = place.Name;
          });
        }
      }
      try {
        var sJson = System.IO.File.ReadAllText(DS.DataDir + "conf/aoi.json");
        var vertices = JsonConvert.DeserializeObject<LatLngLiteral[]>(sJson);
        var path = new List<LatLngLiteral>(vertices);
        var polygon = Polygon.CreateAsync(googleMap.JsRuntime,new PolygonOptions {
          Map=googleMap.InteropObject,
          Editable=false,
          StrokeColor="#FF0000",
          StrokeOpacity=0.8f,
          StrokeWeight=3,
          FillColor="#FF0000",
          FillOpacity=0.02f,
          ZIndex=-1000000,
          Paths = new List<List<LatLngLiteral>>(new[] { path }),
        });
      } catch { }
      await this.RefreshElementMarkers();
    }
  }
  private async Task RefreshElementMarkers() {
    if (SD.CurrentUser.Level>=400) {
      foreach (var el in DS.GetElements(SD.Filters)) {
        var latLng = new LatLngLiteral(el.ElementProp.MarkerInfo.position.lng,el.ElementProp.MarkerInfo.position.lat);
        var symbolProps = el.GetSymbolProperties();
        var circle = await Circle.CreateAsync(googleMap.JsRuntime,new CircleOptions {
          Map=googleMap.InteropObject,
          Center=latLng,
          Radius=symbolProps.Radius,
          StrokeColor=symbolProps.FgColor,
          StrokeOpacity=0.60f,
          StrokeWeight=2,
          FillColor=symbolProps.BgColor,
          FillOpacity=0.35f,
          ZIndex=1000000,
        });
        await circle.AddListener("click",async () => {
          var s = el.ElementName;
        });
      }
    }
  }
  private async void OnEditClick() {
    var sAoiBounds = await JSRuntime.InvokeAsync<string>("ToggleEditAoiBounds");
    if (sAoiBounds != null) {
      System.IO.File.WriteAllText(DS.DataDir + "conf/aoi.json",sAoiBounds);
    }
  }
}