@page "/"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject DataService DS
@inject SessionData SD
@using BioMap

<Row>
  <Column>
    <Card Margin="Margin.Is4.OnY">
      <CardHeader>
        <CardTitle Size="4">@Localize["Welcome to BioMap!"]</CardTitle>
      </CardHeader>
      <CardImage Source="images/TitlePage.jpg"/>
      <CardBody>
        <p>@Localize["BioMap helps monitor yellow-bellied toads."]</p>
      </CardBody>
    </Card>
  </Column>
</Row>
@if (SD.CurrentUser.Level<200) {
  <Row>
    <Column>
      <Card Margin="Margin.Is4.OnY">
        <CardHeader>
          <CardTitle>@Localize["Register"]</CardTitle>
        </CardHeader>
        <CardBody>
          <CardText>
            @Localize["You can look around the website without registration. However, you will only see alienated location coordinates. If you want to see unaltered data and participate in the project, you are welcome to register."]
          </CardText>
          <Button Color="Color.Primary" Clicked="@((e) => NavigationManager.NavigateTo("/Administration/UserMgt"))">@Localize["Register"]</Button>
        </CardBody>
      </Card>
    </Column>
  </Row>
}

@code {
  protected override Task OnInitializedAsync() {
    return base.OnInitializedAsync();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (!DS.IsMigrationInProcess && firstRender) {
      bool bAnyChanged = false;
      try {
        var sEMail = await JSRuntime.InvokeAsync<string>("getCookie","UserId");
        var sUserId = sEMail.Trim().ToLowerInvariant();
        if (string.CompareOrdinal(sEMail,sUserId)!=0) {
          await JSRuntime.InvokeAsync<string>("setCookie","UserId",sUserId);
          sEMail=sUserId;
        }
        if (string.CompareOrdinal(sEMail,SD.CurrentUser.EMail)!=0) {
          SD.CurrentUser.EMail = sEMail;
          bAnyChanged=true;
        }
        var sUserPermTicket = await JSRuntime.InvokeAsync<string>("getCookie","UserPermTicket");
        var user = new User();
        DS.LoadUser(SD.CurrentUser.EMail,sUserPermTicket,user);
        if (!object.Equals(user,SD.CurrentUser)) {
          DS.LoadUser(SD.CurrentUser.EMail,sUserPermTicket,SD.CurrentUser);
          bAnyChanged=true;
        }
      } catch { }
      if (bAnyChanged) {
        StateHasChanged();
      }
    }
  }
}
