@page "/lists/all_individuals"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<h1>@Localize["All Individuals"]</h1>

<p>Anzahl Individuen: @Individuals.Count</p>

<table class="table table-striped">
  <thead>
    <tr>
      <th scope="col">IID</th>
      <th scope="col">@Localize["Vintage"]</th>
      <th scope="col">@Localize["Gender"]</th>
      <th scope="col">@Localize["Length"]</th>
      <th scope="col">@Localize["Place"]</th>
      <th scope="col">ID</th>
      <th scope="col">@Localize["Time"]</th>
      <th scope="col">@Localize["User"]</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var iid in Individuals.Keys) {
      <tr>
        <th scope="row">@(iid)</th>
        <td>
          @((MarkupString)GetForElements(iid,el=>el.GetYearOfBirthAsString(),true))
          @if (!AreYearsOfBirthConsistent(iid)) {
            <br />
            <div class="form-group">
              <input class="form-control" type="number" value="0" @onchange="(e) => inputChanged(e,iid)" />
            </div>
          }
        </td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetGender()))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetHeadBodyLengthNice()))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetPlace()?.Name))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.ElementName))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.GetIsoDate()))</td>
        <td>@((MarkupString)GetForElements(iid,el=>el.ElementProp.UploadInfo.UserId))</td>
      </tr>
    }
  </tbody>
</table>

@code {
  private Dictionary<int,List<Element>> Individuals = new Dictionary<int,List<Element>>();
  protected override void OnInitialized() {
    base.OnInitialized();
    SD.Filters.FilterChanged+=(sender,ev) =>
    {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void RefreshData() {
    this.Individuals = DataService.Instance.GetIndividuals(SD.Filters);
  }
  private string GetForElements(int iid,Func<Element,string> func,bool bAddYoBWarning = false) {
    var sb = new System.Text.StringBuilder();
    string sPreFix = "";
    string sWarnPostfix = "";
    int? nOrigYoB = null;
    foreach (var el in this.Individuals[iid]) {
      if (!nOrigYoB.HasValue) {
        nOrigYoB=el.GetYearOfBirth();
      }
      if (bAddYoBWarning && !object.Equals(nOrigYoB,el.GetYearOfBirth())) {
        sWarnPostfix=" !!!";
      }
      sb.Append(sPreFix+func(el)+sWarnPostfix);
      sPreFix="<br/>";
    }
    return sb.ToString();
  }
  private string GetYoB(int iid) {
    foreach (var el in this.Individuals[iid]) {
      int? nElYoB = el.GetYearOfBirth();
      if (nElYoB.HasValue) {
        return ConvInvar.ToString(nElYoB.Value);
      }
    }
    return "";
  }
  bool AreYearsOfBirthConsistent(int iid) {
    int nYoB = 0;
    foreach (var el in this.Individuals[iid]) {
      if (nYoB!=0) {
        if (nYoB!=el.GetYearOfBirth().Value) {
          return false;
        }
      } else {
        nYoB=el.GetYearOfBirth().Value;
      }
    }
    return true;
  }
  void inputChanged(ChangeEventArgs e,int iid) {
    int nYoB = ConvInvar.ToInt(e.Value.ToString());
    foreach (var el in this.Individuals[iid]) {
      el.ElementProp.IndivData.DateOfBirth=new DateTime(nYoB,7,1);
      DataService.Instance.WriteElement(el);
    }
  }
}
