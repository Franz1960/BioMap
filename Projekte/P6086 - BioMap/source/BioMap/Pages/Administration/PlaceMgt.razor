@page "/Administration/Places"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject NavigationManager NM
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<Row>
  <Column>
    <Card Margin="Margin.Is4.OnY">
      <CardHeader>
        <CardTitle>@Localize["Places"]</CardTitle>
      </CardHeader>
      <CardBody>
        <table class="table table-sm">
          <thead>
            <tr>
              <th scope="col">@Localize["Place"]</th>
              <th scope="col">@Localize["Latitude"]</th>
              <th scope="col">@Localize["Longitude"]</th>
              <th scope="col">@Localize["Radius"]</th>
              @foreach (var trait in Places.Traits) {
                <th scope="col">@trait.Name</th>
              }
            </tr>
          </thead>
          <tbody>
            @foreach (var place in AllPlaces) {
            <tr>
              <th scope="row">@place.Name</th>
              <td>
                <NumericEdit TValue="double" Disabled="IsReadOnly()" @bind-Value="place.LatLng.lat" />
              </td>
              <td>
                <NumericEdit TValue="double" Disabled="IsReadOnly()" @bind-Value="place.LatLng.lng" />
              </td>
              <td>
                <NumericEdit TValue="double" Disabled="IsReadOnly()" @bind-Value="place.Radius" />
              </td>
              @foreach (var idx in Enumerable.Range(0,Places.Traits.Length)) {
                <td>
                  <Select Disabled="IsReadOnly()" @bind-SelectedValue="place.TraitValues[idx]">
                    @foreach (var idx1 in Enumerable.Range(0,Places.Traits[idx].ValueNames.Length)) {
                      <SelectItem Value="idx1">@Places.Traits[idx].ValueNames[idx1]</SelectItem>
                    }
                  </Select>
                </td>
              }
            </tr>
            }
          </tbody>
        </table>
      </CardBody>
    </Card>
  </Column>
</Row>

@code {
  private Place[] AllPlaces = new Place[0];
  protected override void OnInitialized() {
    base.OnInitialized();
    NM.LocationChanged+=NM_LocationChanged;
    RefreshData();
  }
  private void NM_LocationChanged(object sender, LocationChangedEventArgs e) {
    NM.LocationChanged-=NM_LocationChanged;
    DS.WriteAllPlaces();
  }
  private void RefreshData() {
    this.AllPlaces = DataService.Instance.AllPlaces;
  }
  private bool IsReadOnly() => SD.CurrentUser.Level<600;
}
