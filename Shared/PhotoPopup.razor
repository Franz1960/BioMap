@inject DataService DS
@inject SessionData SD

<Modal @ref="modalRef">
  <ModalBackdrop />
  <ModalContent Size="@modalSize" Centered="@centered">
    <ModalHeader>
      <ModalTitle>
        @Title
      </ModalTitle>
      <Buttons Role="ButtonsRole.Toolbar">
        <Buttons Margin="Margin.Is2.FromRight">
          <Button Clicked="@((e)=>sizeButtonClicked())"><Icon Name="@sizeButtonIconName" /></Button>
        </Buttons>
        <CloseButton Clicked="@((e)=>Hide())" />
      </Buttons>
    </ModalHeader>
    <ModalBody MaxHeight="@maxHeight">
      <img src="api/photos/@ElementName" style="max-width:100%;max-height:100%;margin-top:3px;" />
      <table class="table">
        <tbody>
          @foreach (var p in Properties) {
            <tr>
              <td>@((MarkupString)p[0])</td>
              <td>@((MarkupString)p[1])</td>
            </tr>
          }
        </tbody>
      </table>
    </ModalBody>
    <ModalFooter>
    </ModalFooter>
  </ModalContent>
</Modal>

@code{
  private Modal modalRef;
  private IconName sizeButtonIconName = IconName.Expand;
  private bool centered = false;
  private ModalSize modalSize = ModalSize.Default;
  private int? maxHeight = 80;
  [Parameter]
  public string Title { get; set; }
  [Parameter]
  public string ElementName { get; set; }
  private Boolean _Show { get; set; }
  private List<string[]> Properties { get; set; } = new List<string[]>();
  public void Show(Element el) {
    this.ElementName=el.ElementName;
    this.Title=el.ElementName;
    this.Properties.Clear();
    if (el.HasIndivData() && el.HasMeasuredData()) {
      this.Properties.Add(new[] { "Individual","<b>"+el.GetIId()+"</b> ("+el.GetGender()+" / "+el.GetHeadBodyLengthNice()+" / "+el.GetPlace().Name+")" });
    }
    this.Properties.Add(new[] { "Cat.",el.GetCategoryNice() });
    this.Properties.Add(new[] { "File name",el.ElementName });
    this.Properties.Add(new[] { "Time",ConvInvar.ToString(el.ElementProp.CreationTime) });
    this.Properties.Add(new[] { "Uploaded",ConvInvar.ToString(el.ElementProp.UploadInfo.Timestamp) });
    this.Properties.Add(new[] { "by",el.ElementProp.UploadInfo.UserId });
    if (el.HasPhotoData()) {
      this.Properties.Add(new[] { "Camera",el.ElementProp.ExifData.Make+" / "+el.ElementProp.ExifData.Model });
    }
    if (el.HasIndivData()) {
      var els = DS.GetElements(null,"indivdata.iid='"+el.GetIId()+"' AND elements.creationtime<'"+el.GetIsoDateTime()+"'","elements.creationtime DESC");
      if (els.Length>=1) {
        double dDistance = GeoCalculator.GetDistance(els[0].ElementProp.MarkerInfo.position,el.ElementProp.MarkerInfo.position);
        this.Properties.Add(new[] { "Migration distance",ConvInvar.ToDecimalString(dDistance,0)+" m" });
      }
    }
    this.modalRef.Show();
  }
  public void Hide() {
    this.modalRef.Hide();
  }
  private void sizeButtonClicked() {
    if (this.modalSize==ModalSize.Default) {
      this.modalSize=ModalSize.Large;
      this.sizeButtonIconName=IconName.Compress;
    } else {
      this.modalSize=ModalSize.Default;
      this.sizeButtonIconName=IconName.Expand;
    }
  }
}