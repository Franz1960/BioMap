@page "/Pictures/AllImages"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Elements" />
<SortAndGroupSettings @ref="this.SortAndGroupSettings1" Context="AllImages" AnyChanged="async () => { this.RefreshData(); }" />
<PhotoPopup @ref="this.PhotoPopup1" ElementDeleted="@(() => this.OnElementDeleted())" />

@foreach (var group in this.ElementsByPlaceName)
{
  @if (this.SortAndGroupSettings1.GroupByPlace)
  {
    <div class="row">
    <h2>@(string.IsNullOrEmpty(group.Key) ? Localize["Outside defined places"] : group.Key)</h2>
    </div>
  }
  <div class="row">
    @foreach (var el in group)
    {
      <div class="card" style="width: 240px;">
        <a href="javascript:void(0);" @onclick="() => OnSelectClick(el)">
          <img class="card-img-top" src="api/photos/@el.ElementName?maxdim=240&Project=@SD.CurrentUser.Project" style="max-width:100%;max-height:100%;margin-top:1px;" />
        </a>
        <div class="card-footer">
          <small>(@el.GetIsoDate()/@el.GetClassOrIId()/@el.GetPlaceName())</small>
        </div>
      </div>
    }
  </div>
}

@code {
  private PhotoPopup PhotoPopup1;
  private SortAndGroupSettings SortAndGroupSettings1;
  private List<IGrouping<string, Element>> ElementsByPlaceName { get; } = new List<IGrouping<string, Element>>();
  protected override void OnInitialized()
  {
    base.OnInitialized();
    SD.Filters.FilterChanged += (sender, ev) =>
    {
      RefreshData();
      base.InvokeAsync(this.StateHasChanged);
    };
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      RefreshData();
    }
  }
  private void RefreshData()
  {
    if (this.SortAndGroupSettings1 != null)
    {
      var els =
        DS.GetElements(SD, SD.Filters, "", "elements.creationtime " + (this.SortAndGroupSettings1.SortDown ? "DESC" : "ASC"))
        .Where(el => !string.IsNullOrEmpty(PhotoController.GetFilePathForExistingImage(DS, SD.CurrentUser.Project, el.ElementName)));
      this.ElementsByPlaceName.Clear();
      if (this.SortAndGroupSettings1.GroupByPlace)
      {
        this.ElementsByPlaceName.AddRange((els.GroupBy(el => el.GetPlaceName()).OrderBy(group => group.Key)));
      }
      else
      {
        this.ElementsByPlaceName.AddRange((els.GroupBy(el => "")));
      }
      this.StateHasChanged();
    }
  }
  private void OnSelectClick(Element el)
  {
    this.PhotoPopup1.Show(el);
  }
  public void OnElementDeleted() {
    this.RefreshData();
    this.StateHasChanged();
  }
}
