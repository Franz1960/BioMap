@page "/Add/Image"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<Row>
  <Column>
    <h1>@Localize["Add Image"]</h1>
  </Column>
</Row>
<Row Margin="Margin.Is2.OnY">
  <Column>
    @{
      var addAttr = new Dictionary<string,object>(new KeyValuePair<string,object>[] {
        new KeyValuePair<string,object>("accept","image/*"),
        new KeyValuePair<string,object>("multiple","multiple"),
      });
      <InputFile AdditionalAttributes="addAttr" OnChange="@OnInputFileChange" />
    }
    @if (imageDataUrls.Count > 0) {
      <h4>Images</h4>

      <div class="card" style="width:30rem;">
        <div class="card-body">
          @foreach (var imageDataUrl in imageDataUrls) {
            <img class="rounded m-1" src="@imageDataUrl" />
          }
        </div>
      </div>
    }
  </Column>
</Row>
<Modal @ref="progressModalRef" >
  <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
    <ModalHeader>
      <ModalTitle>
        @Localize["Operation in progress.."]
      </ModalTitle>
    </ModalHeader>
    <ModalBody>
      <Progress Margin="Margin.Is3.FromBottom">
        <ProgressBar Value="progressCompletion">@progressCompletion.ToString()%</ProgressBar>
      </Progress>
      @if (errorMessages.Count>=1) {
        foreach (var msg in errorMessages) {
        <Row Margin="Margin.Is1.OnY">
          <Column>
            @msg
          </Column>
        </Row>
        }
        <Row Margin="Margin.Is2.OnY">
          <Column>
            <Button Color="Color.Primary" @onclick="()=>progressModalRef.Hide()">@Localize["Close"]</Button>
          </Column>
        </Row>
      }
    </ModalBody>
  </ModalContent>
</Modal>

<div id="uploadUI">
</div>
<form method="post" enctype="multipart/form-data">
  <input type="file" id="inputImageFiles" name="files[]" accept="image/*" multiple style="visibility:hidden;" />
</form>

@code {
  private Modal progressModalRef;
  private int progressCompletion = 0;
  private List<string> errorMessages=new List<string>();
  //
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
      await JSRuntime.InvokeAsync<string>("UploadImageFiles_Init","inputImageFiles","uploadUI");
    }
  }
  private async void OnSelectClick() {
    var sResult = await JSRuntime.InvokeAsync<string>("UploadImageFiles_Click","inputImageFiles");
  }
  //
  private IList<string> imageDataUrls = new List<string>();
  //
  private async Task OnInputFileChange(InputFileChangeEventArgs e) {
    var maxAllowedFiles = 30;
    errorMessages.Clear();
    progressCompletion=0;
    progressModalRef.Show();
    try {
      var files= e.GetMultipleFiles(maxAllowedFiles);
      for (int idxFile=0;idxFile<files.Count;idxFile++) {
        var imageFile=files[idxFile];
        progressCompletion=((idxFile+1)*100)/files.Count;
        await this.InvokeAsync(() => { StateHasChanged(); });
        try {
          var imageStream = imageFile.OpenReadStream(20000000);
          var sDestTempFilePath = System.IO.Path.Combine(DS.GetTempDir(SD.CurrentUser.Project),imageFile.Name);
          using (var destStream = new System.IO.FileStream(sDestTempFilePath,System.IO.FileMode.Create)) {
            await imageStream.CopyToAsync(destStream);
            destStream.Close();
          }
          var el = Element.CreateFromImageFile(SD.CurrentUser.Project,sDestTempFilePath,SD.CurrentUser.EMail);
          if (el.ElementProp.MarkerInfo.position==null) {
            errorMessages.Add("No GPS location in \""+el.ElementName+"\"");
          } else {
            DS.WriteElement(SD,el);
            var sDestFilePath = DS.GetFilePathForImage(SD.CurrentUser.Project,imageFile.Name,true);
            Migration.CopyImageCompressed(sDestTempFilePath,sDestFilePath,2000);
          }
          System.IO.File.Delete(sDestTempFilePath);
        } catch (Exception ex) {
          errorMessages.Add(ex.ToString());
          await this.InvokeAsync(() => { StateHasChanged(); });
        }
      }
    } finally {
      if (errorMessages.Count<1) {
        await this.InvokeAsync(() => { progressModalRef.Hide(); StateHasChanged(); });
      }
    }
  }
}
