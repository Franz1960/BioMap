@page "/Statistics/Summary"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<h1>@Localize["Summary"]</h1>

<div class="card">
  <div class="card-body">
    <h5 class="card-title text-center">@Localize["Different Individuals"]</h5>
    <table class="table table-sm table-striped text-right">
      <thead>
        <tr>
          <th scope="col">@Localize["Conditions"]</th>
          <th scope="col">@Localize["All Years"]</th>
          @for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
            <th scope="col">@year</th>
          }
        </tr>
      </thead>
      <tbody>
        @foreach (var dby in this.IndividualData) {
          <tr>
            <td scope="col">@dby.Name</td>
            <td scope="col">@dby.AllYears</td>
            @for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
              <td scope="col">@dby.ByYear[year-ProjectYearBegin]</td>
            }
          </tr>
        }
      </tbody>
    </table>
    <p class="text-center">
      @Localize["Gezählt werden alle verschiedenen Individuen,die im jeweiligen Zeitraum mindestens einmal die Bedingungen erfüllen."]
    </p>
  </div>
  <div class="card-footer">
    <CheckBox Checked="ShowDetails" CheckedChanged="(e)=>{ ShowDetails=e; RefreshData(); }" LabelText=@Localize["Show details"] />
  </div>
</div>
<p></p>
<div class="card">
  <div class="card-body">
    <h5 class="card-title text-center">@Localize["Other elements"]</h5>
    <table class="table table-sm table-striped text-right">
      <thead>
        <tr>
          <th scope="col"></th>
          <th scope="col">@Localize["All Years"]</th>
          @for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
            <th scope="col">@year</th>
          }
        </tr>
      </thead>
      <tbody>
        @foreach (var dby in this.OtherData) {
          <tr>
            <td scope="col">@dby.Name</td>
            <td scope="col">@dby.AllYears</td>
            @for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
              <td scope="col">@dby.ByYear[year-ProjectYearBegin]</td>
            }
          </tr>
        }
      </tbody>
    </table>
    <p class="text-center">
      @Localize[""]
    </p>
  </div>
</div>

@code {
  private int ProjectYearBegin;
  private int ProjectYearEnd;
  private class DataByYears_t
  {
    public string Name;
    public string AllYears;
    public string[] ByYear;
  }
  private bool ShowDetails=false;
  private readonly List<DataByYears_t> IndividualData = new List<DataByYears_t>();
  private readonly List<DataByYears_t> OtherData = new List<DataByYears_t>();
  protected override void OnInitialized() {
    base.OnInitialized();
    ProjectYearBegin=SD.CurrentProject.StartDate.Value.Year;
    ProjectYearEnd=DateTime.Now.Year;
    SD.Filters.FilterChanged+=(sender,ev) => {
      RefreshData();
      base.InvokeAsync(StateHasChanged);
    };
    RefreshData();
  }
  private void RefreshData() {
    //
    this.IndividualData.Clear();
    {
      Tuple<string,string>[] aIndiSpecs;
      if (ShowDetails) {
        aIndiSpecs = new[] {
          new Tuple<string,string>(Localize["Totals"],""),
          new Tuple<string,string>(">= 38 mm","indivdata.headbodylength>=38"),
          new Tuple<string,string>(">= 33 mm","indivdata.headbodylength>=33"),
          new Tuple<string,string>("< 33 mm","indivdata.headbodylength<33"),
          new Tuple<string,string>("0 "+Localize["Hibernations"],"indivdata.winters=0"),
          new Tuple<string,string>("1 "+Localize["Hibernations"],"indivdata.winters=1"),
          new Tuple<string,string>("1+ "+Localize["Hibernations"],"indivdata.winters>=1"),
          new Tuple<string,string>("2 "+Localize["Hibernations"],"indivdata.winters=2"),
          new Tuple<string,string>("2+ "+Localize["Hibernations"],"indivdata.winters>=2"),
          new Tuple<string,string>("3 "+Localize["Hibernations"],"indivdata.winters=3"),
          new Tuple<string,string>("3+ "+Localize["Hibernations"],"indivdata.winters>=3"),
          new Tuple<string,string>(Localize["Female"],"indivdata.gender='f'"),
          new Tuple<string,string>(Localize["Male"],"indivdata.gender='m'"),
          new Tuple<string,string>(Localize["Female"]+" 2+ "+Localize["Hibernations"],"indivdata.gender='f' AND indivdata.winters>=2"),
          new Tuple<string,string>(Localize["Male"]+" 2+ "+Localize["Hibernations"],"indivdata.gender='m' AND indivdata.winters>=2"),
        };
      } else {
        aIndiSpecs = new[] {
          new Tuple<string,string>(Localize["Totals"],""),
          new Tuple<string,string>("0 "+Localize["Hibernations"],"indivdata.winters=0"),
          new Tuple<string,string>("1 "+Localize["Hibernations"],"indivdata.winters=1"),
          new Tuple<string,string>("2+ "+Localize["Hibernations"],"indivdata.winters>=2"),
          new Tuple<string,string>(Localize["Female"]+" 2+ "+Localize["Hibernations"],"indivdata.gender='f' AND indivdata.winters>=2"),
          new Tuple<string,string>(Localize["Male"]+" 2+ "+Localize["Hibernations"],"indivdata.gender='m' AND indivdata.winters>=2"),
        };
      }
      foreach (var indiSpec in aIndiSpecs) {
        var aaIndisByIId = DS.GetIndividuals(SD,null,indiSpec.Item2);
        int nAllYears = 0;
        var aByYears = new int[ProjectYearEnd+1-ProjectYearBegin];
        foreach (var iid in aaIndisByIId.Keys) {
          foreach (var el in aaIndisByIId[iid]) {
            int year = el.ElementProp.CreationTime.Year;
            if (year>=ProjectYearBegin && year<=ProjectYearEnd) {
              nAllYears++;
              break;
            }
          }
          for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
            foreach (var el in aaIndisByIId[iid]) {
              if (el.ElementProp.CreationTime.Year==year) {
                aByYears[year-ProjectYearBegin]++;
                break;
              }
            }
          }
        }
        this.IndividualData.Add(
          new DataByYears_t {
            Name=indiSpec.Item1,
            AllYears=nAllYears.ToString(),
            ByYear=Array.ConvertAll<int,string>(aByYears,(n) => n.ToString()),
          }
        );
      }
    }
    //
    {
      var aaIndisByIId = DS.GetIndividuals(SD);
      Tuple<string,Func<List<Element>,int,bool>>[] aIndiSpecs;
      if (ShowDetails) {
        aIndiSpecs = new Tuple<string,Func<List<Element>,int,bool>>[] {
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"]+" 0 "+Localize["Hibernations"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1 && ea[ea.Count-1].GetWinters()<1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"]+" 1 "+Localize["Hibernations"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1 && ea[ea.Count-1].GetWinters()==1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"]+" 1+ "+Localize["Hibernations"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1 && ea[ea.Count-1].GetWinters()>=1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"]+" 2 "+Localize["Hibernations"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1 && ea[ea.Count-1].GetWinters()==2),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"]+" 2+ "+Localize["Hibernations"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1 && ea[ea.Count-1].GetWinters()>=2),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"]+" 0 "+Localize["Hibernations"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year && ea[0].GetWinters()<1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"]+" 1 "+Localize["Hibernations"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year && ea[0].GetWinters()==1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"]+" 1+ "+Localize["Hibernations"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year && ea[0].GetWinters()>=1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"]+" 2 "+Localize["Hibernations"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year && ea[0].GetWinters()==2),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"]+" 2+ "+Localize["Hibernations"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year && ea[0].GetWinters()>=2),
        };
      } else {
        aIndiSpecs = new Tuple<string,Func<List<Element>,int,bool>>[] {
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["Missed individuals"],
          (ea,year)=>ea[ea.Count-1].ElementProp.CreationTime.Year==year-1),
          new Tuple<string,Func<List<Element>,int,bool>>(
          Localize["New individuals"],
          (ea,year)=>ea[0].ElementProp.CreationTime.Year==year),
        };
      }
      foreach (var indiSpec in aIndiSpecs) {
        var lCounts = new List<int>();
        for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
          int nCount = 0;
          foreach (var ea in aaIndisByIId.Values) {
            if (indiSpec.Item2(ea,year)) {
              nCount++;
            }
          }
          lCounts.Add(nCount);
        }
        this.IndividualData.Add(
          new DataByYears_t {
            Name=indiSpec.Item1,
            AllYears="",
            ByYear=Array.ConvertAll<int,string>(lCounts.ToArray(),(n) => n.ToString()),
          }
        );
      }
    }
    //
    this.OtherData.Clear();
    foreach (var indiSpec in new[] {
      new Tuple<string,string>(Localize["Totals"],""),
      new Tuple<string,string>(Localize["ID Cards"],"elements.category=350"),
      new Tuple<string,string>(Localize["Other photos and local news"],"elements.category<>350"),
    }) {
      var aEls = DS.GetElements(SD,null,indiSpec.Item2);
      int nAllYears = 0;
      var aByYears = new int[ProjectYearEnd+1-ProjectYearBegin];
      foreach (var el in aEls) {
        int year = el.ElementProp.CreationTime.Year;
        if (year>=ProjectYearBegin && year<=ProjectYearEnd) {
          nAllYears++;
        }
      }
      for (int year = ProjectYearBegin;year<=ProjectYearEnd;year++) {
        foreach (var el in aEls) {
          if (el.ElementProp.CreationTime.Year==year) {
            aByYears[year-ProjectYearBegin]++;
          }
        }
      }
      this.OtherData.Add(
        new DataByYears_t {
          Name=indiSpec.Item1,
          AllYears=nAllYears.ToString(),
          ByYear=Array.ConvertAll<int,string>(aByYears,(n) => n.ToString()),
        }
      );
    }
  }
}
