@page "/Administration/ProjectMgt"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject NavigationManager NM
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

@if (!SD.CurrentUser.MaySeeProject) {
  <Row>
    <Column>
      <Heading Size="HeadingSize.Is4">
        @string.Format(Localize["Access level {0} not sufficient to see this page."],SD.CurrentUser.Level.ToString())
      </Heading>
    </Column>
  </Row>
} else {
  <Row>
    <Column>
      <Card Margin="Margin.Is2.OnY">
        <CardHeader>
          <CardTitle>@Localize["Administration"]</CardTitle>
        </CardHeader>
        <CardBody>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Owner"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <TextEdit Disabled="true" Text="@SD.CurrentProject.Owner" />
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Start date"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <DateEdit TValue="DateTime?" Disabled="!SD.CurrentUser.IsOwner" @bind-Date="SD.CurrentProject.StartDate"></DateEdit>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Max. allowed elements"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <NumericEdit TValue="int" Disabled="!SD.CurrentUser.IsSuperAdmin" @bind-Value="SD.CurrentProject.MaxAllowedElements" />
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Current elements"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <NumericEdit TValue="int" Disabled="true" Value="DS.GetElementCount(SD)" />
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Level to see elements"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <NumericEdit TValue="int" Disabled="!SD.CurrentUser.IsOwner" @bind-Value="SD.CurrentProject.MinLevelToSeeElements" />
              <FieldHelp>@Localize["Default value"]: 200</FieldHelp>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Level to see exact locations"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <NumericEdit TValue="int" Disabled="!SD.CurrentUser.IsOwner" @bind-Value="SD.CurrentProject.MinLevelToSeeExactLocations" />
              <FieldHelp>@Localize["Default value"]: 400</FieldHelp>
            </FieldBody>
          </Field>
        </CardBody>
      </Card>
    </Column>
  </Row>
  <Row>
    <Column>
      <Card Margin="Margin.Is2.OnY">
        <CardHeader>
          <CardTitle>@Localize["Data"]</CardTitle>
        </CardHeader>
        <CardBody>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Import data from old web site"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<7000)" Clicked="@(async (e)=>{ await Import_Clicked(); })">@Localize["Import"]</Button>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Migrate categories"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<7000)" Clicked="@(async (e)=>{ await MigrateCategories_Clicked(); })">@Localize["Start"]</Button>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Migrate image sizes"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<7000)" Clicked="@(async (e)=>{ await MigrateImageSize_Clicked(); })">@Localize["Start"]</Button>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Edit area of interest"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<700)" Clicked="@((e)=>{ EditAoi_Clicked(); })">@Localize["Start"]</Button>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Area extension tolerance"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <NumericEdit TValue="double" Disabled="@(SD.CurrentUser.Level<500)" @bind-Value="SD.CurrentProject.AoiTolerance" Min="-0.0001" Max="2" />
              <FieldHelp>@Localize["0: no tolerance, 1: double extension"]</FieldHelp>
            </FieldBody>
          </Field>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Recalculate all"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<500)" Clicked="@(async (e)=>{ await RecalculateAll_Clicked(); })">@Localize["Start"]</Button>
            </FieldBody>
          </Field>
        </CardBody>
      </Card>
    </Column>
  </Row>
  <Row>
    <Column>
      <Card Margin="Margin.Is2.OnY">
        <CardHeader>
          <CardTitle>@Localize["Biology"]</CardTitle>
        </CardHeader>
        <CardBody>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Monitored species (scientific name)"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <TextEdit TValue="string" Disabled="@(SD.CurrentUser.Level<700)" @bind-Text="SD.CurrentProject.SpeciesSciName" />
            </FieldBody>
          </Field>
        </CardBody>
      </Card>
    </Column>
  </Row>
  <Row>
    <Column>
      <Card Margin="Margin.Is2.OnY">
        <CardHeader>
          <CardTitle>@Localize["Documents"]</CardTitle>
        </CardHeader>
        <CardBody>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Add document"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              @{
                var addAttr = new Dictionary<string,object>(new KeyValuePair<string,object>[] {
                  new KeyValuePair<string,object>("multiple","multiple"),
                });
            <InputFile AdditionalAttributes="addAttr" OnChange="@OnInputFileChange" />
              }
            </FieldBody>
          </Field>
          <Table Class="table-striped table-sm">
            <TableHeader>
              <TableRow>
                <TableHeaderCell>@Localize["Name"]</TableHeaderCell>
                <TableHeaderCell>@Localize["Type"]</TableHeaderCell>
                <TableHeaderCell></TableHeaderCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              @foreach (var doc in DS.GetDocs(SD.CurrentUser.Project)) {
                <TableRow>
                  <TableRowCell>@doc.DisplayName</TableRowCell>
                  <TableRowCell>@doc.DocType.ToString()</TableRowCell>
                  <TableRowCell>
                    <Button Color="Color.Light" Disabled="SD.CurrentUser.Level<700" Clicked="@((e)=>{ DS.DeleteDoc(SD.CurrentUser.Project,doc.Filename); })">
                      <Icon Name="IconName.Delete"></Icon>
                    </Button>
                  </TableRowCell>
                </TableRow>
              }
            </TableBody>
          </Table>
        </CardBody>
      </Card>
    </Column>
  </Row>
}
<Modal @ref="progressModalRef">
  <ModalContent Centered="true">
    <ModalHeader>
      <ModalTitle>
        @Localize["Operation in progress.."]
      </ModalTitle>
    </ModalHeader>
    <ModalBody>
      <Progress Margin="Margin.Is3.FromBottom">
        <ProgressBar Value="progressCompletion">@progressCompletion.ToString()%</ProgressBar>
      </Progress>
      @if (messages.Count>=1) {
        foreach (var msg in messages) {
          <Row Margin="Margin.Is1.OnY">
            <Column>
              @msg
            </Column>
          </Row>
        }
        <Row Margin="Margin.Is2.OnY">
          <Column>
            <Button Color="Color.Primary" Float="Float.Right" @onclick="()=>progressModalRef.Hide()">@Localize["Close"]</Button>
          </Column>
        </Row>
      }
    </ModalBody>
  </ModalContent>
</Modal>

@code {
  private Modal progressModalRef;
  private int progressCompletion = 0;
  private List<string> messages = new List<string>();
  //
  protected override void OnInitialized() {
    base.OnInitialized();
    NM.LocationChanged+=NM_LocationChanged;
  }
  private void NM_LocationChanged(object sender,LocationChangedEventArgs e) {
    NM.LocationChanged-=NM_LocationChanged;
    DS.WriteProject(SD,SD.CurrentProject);
  }
  private async Task Import_Clicked() {
    progressCompletion=0;
    progressModalRef.Show();
    try {
      await Migration.MigrateData(SD,(completion) => {
        progressCompletion=completion;
        this.InvokeAsync(() => { StateHasChanged(); });
      });
    } finally {
      await this.InvokeAsync(() => { progressModalRef.Hide(); StateHasChanged(); });
    }
  }
  private async Task MigrateCategories_Clicked() {
    progressCompletion=0;
    progressModalRef.Show();
    try {
      await Migration.MigrateCategories(SD,(completion) => {
        progressCompletion=completion;
        this.InvokeAsync(() => { StateHasChanged(); });
      });
    } finally {
      await this.InvokeAsync(() => { progressModalRef.Hide(); StateHasChanged(); });
    }
  }
  private async Task MigrateImageSize_Clicked() {
    progressCompletion=0;
    progressModalRef.Show();
    try {
      await Migration.MigrateImageSize(SD,(completion) => {
        progressCompletion=completion;
        this.InvokeAsync(() => { StateHasChanged(); });
      });
    } finally {
      await this.InvokeAsync(() => { progressModalRef.Hide(); StateHasChanged(); });
    }
  }
  private void EditAoi_Clicked() {
    NM.NavigateTo("/Maps/AoiEdit");
  }
  private async Task RecalculateAll_Clicked() {
    progressCompletion=0;
    progressModalRef.Show();
    try {
      await DataCalculator.CalculatePlacesOfElements(SD,(completion) => {
        if (progressCompletion!=completion) {
          progressCompletion=completion;
          this.InvokeAsync(() => { StateHasChanged(); });
        }
      });
    } finally {
      await this.InvokeAsync(() => { progressModalRef.Hide(); StateHasChanged(); });
    }
  }
  private async Task OnInputFileChange(InputFileChangeEventArgs e) {
    var maxAllowedFiles = 30;
    int nUploadedFiles = 0;
    messages.Clear();
    progressCompletion=0;
    progressModalRef.Show();
    try {
      var files = e.GetMultipleFiles(maxAllowedFiles);
      for (int idxFile = 0;idxFile<files.Count;idxFile++) {
        var docFile = files[idxFile];
        progressCompletion=(int)Math.Round(((idxFile+0.5)*100)/files.Count);
        await this.InvokeAsync(() => { StateHasChanged(); });
        try {
          var docStream = docFile.OpenReadStream(20000000);
          var sDestFilePath = System.IO.Path.Combine(DS.GetDocsDir(SD.CurrentUser.Project),docFile.Name);
          using (var destStream = new System.IO.FileStream(sDestFilePath,System.IO.FileMode.Create)) {
            await docStream.CopyToAsync(destStream);
            destStream.Close();
          }
          nUploadedFiles++;
        } catch (Exception ex) {
          messages.Add(ex.ToString());
          await this.InvokeAsync(() => { StateHasChanged(); });
        }
        progressCompletion=(int)Math.Round(((idxFile+1.0)*100)/files.Count);
        await this.InvokeAsync(() => { StateHasChanged(); });
      }
      messages.Add(string.Format(Localize["{0} files uploaded."],nUploadedFiles.ToString()));
      await this.InvokeAsync(() => { StateHasChanged(); });
    } finally {
      if (messages.Count<1) {
        await this.InvokeAsync(() => { progressModalRef.Hide(); StateHasChanged(); });
      }
    }
  }
}
