@page "/Maps/AoiEdit"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inherits ElementMap

<Row Margin="Margin.Is1.OnY">
  <Column>
    <CheckBox Checked="ShowCustomMap" CheckedChanged="@((e)=>{ ShowCustomMap=e; })" LabelText=@Localize["Show custom map"] />
  </Column>
  <Column>
    <CheckBox Checked="ShowPlaces" CheckedChanged="@((e)=>{ ShowPlaces=e; })" LabelText=@Localize["Show places"] />
  </Column>
  <Column>
    <Button Color="Color.Primary" Clicked="@(async (e)=>{ await Clear_Clicked(); })"><Blazorise.Icon Name="IconName.Clear"/> @Localize["Clear"]</Button>
  </Column>
  <Column>
    <Button Color="Color.Primary" Clicked="@(async (e)=>{ await Save_Clicked(); })">@Localize["Save"]</Button>
  </Column>
</Row>
<GoogleMap @ref="@googleMap" Id="googleMap" Options="@mapOptions" Height="100%"></GoogleMap>

@code{
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    base.AoiEditable=true;
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
    }
  }
  private async Task Clear_Clicked() {
    await base.ClearAoiPath();
  }
  private async Task Save_Clicked() {
    var latLngLiterals = await base.GetAoiPath();
    DS.WriteAoi(SD,latLngLiterals);
  }
}