@page "/Lists/IndividualMigrations"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<div class="box">
  <div class="row header">
    <FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Catches" />
  </div>
  <div class="row content">
    <p>Anzahl Individuen: @this.IndiMigrations.Length</p>

    <table class="table table-striped table-sm">
      <thead>
        <tr>
          <th scope="col">IID</th>
          <th scope="col">@Localize["Metamorphosis"]</th>
          <th scope="col">@Localize["Migration distances"]</th>
          <th scope="col">@Localize["Places"]</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var im in this.IndiMigrations) {
          <tr>
            <td scope="row">@(im.IId)</td>
            <td scope="row">@(im.YearOfBirth)</td>
            <td scope="row">
              @(im.TotalDistance.ToString("0"))
            </td>

            <td scope="row">@(im.PlaceSequence)</td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>

@code {
  private class IndiMigration
  {
    public int IId;
    public string YearOfBirth;
    public double TotalDistance;
    public string PlaceSequence;
  }
  private IndiMigration[] IndiMigrations = new IndiMigration[0];
  protected override void OnInitialized() {
    base.OnInitialized();
    SD.Filters.FilterChanged += (sender,ev) => {
      RefreshData();
      base.InvokeAsync(this.StateHasChanged);
    };
    RefreshData();
  }
  private void RefreshData() {
    var indis = DS.GetIndividuals(SD,SD.Filters,null,true);
    var iids = indis.Keys.ToArray();
    var indiDistances = iids.Select(iid => this.GetTotalMigrationDistance(indis[iid].ToArray())).ToArray();
    Array.Sort(indiDistances,iids);
    iids = iids.Reverse().ToArray();
    this.IndiMigrations = iids.Select(iid => {
      var els = indis[iid];
      string sPlaceSequence = els[0].GetPlaceName();
      for (int idx = 1;idx<els.Count;idx++) {
        var sPlaceName = els[idx].GetPlaceName();
        if (!sPlaceSequence.EndsWith(sPlaceName)) {
          sPlaceSequence += ", " + sPlaceName;
        }
      }
      return new IndiMigration {
          IId = iid,
          YearOfBirth = indis[iid][0].GetYearOfBirthAsString(),
          TotalDistance = this.GetTotalMigrationDistance(indis[iid].ToArray()),
          PlaceSequence = sPlaceSequence,
        };
    }).ToArray();
    this.StateHasChanged();
  }
  private double GetTotalMigrationDistance(Element[] els) {
    double dTotalDistance = 0;
    for (int idx = 1;idx<els.Length;idx++) {
      double dDistance = GeoCalculator.GetDistance(els[idx - 1].ElementProp.MarkerInfo.position,els[idx].ElementProp.MarkerInfo.position);
      dTotalDistance += dDistance;
    }
    return dTotalDistance;
  }
}
