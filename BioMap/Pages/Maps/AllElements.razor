@page "/Maps/AllElements"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inherits ElementMap

<Row>
  <Column>
    <FilterSettings FilteringTarget="@Filters.FilteringTargetEnum.Elements" />
  </Column>
</Row>
<Row>
  <MapSettings AreaMap="this"/>
</Row>
<PhotoPopup @ref="PhotoPopup1" />
<GoogleMap @ref="@googleMap" Id="googleMap" Options="@mapOptions" Height="100%"></GoogleMap>

@code{
  private PhotoPopup PhotoPopup1;
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    SD.Filters.FilterChanged += (sender, ev) =>
    {
      this.RefreshElementMarkers();
    };
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      base.PhotoPopup = this.PhotoPopup1;
      this.RefreshElementMarkers();
    }
  }
  protected override void RefreshElementMarkers()
  {
    var lElementMarkers = new List<ElementMarker>();
    if (SD.CurrentUser.Level >= 0)
    {
      foreach (var el in DS.GetElements(SD, SD.Filters))
      {
        var latLng = new LatLngLiteral(el.ElementProp.MarkerInfo.position.lng, el.ElementProp.MarkerInfo.position.lat);
        var symbolProps = el.GetSymbolProperties();
        var elm = base.GetMarkerForElement(el);
        if (elm == null)
        {
          elm = new ElementMarker
          {
            Position = latLng,
            Radius = symbolProps.Radius,
            Color = symbolProps.BgColor,
            Element = el,
          };
        }
        else
        {
          elm.Position = latLng;
          elm.Radius = symbolProps.Radius;
          elm.Color = symbolProps.BgColor;
        }
        lElementMarkers.Add(elm);
      }
    }
    base.ElementMarkers = lElementMarkers.ToArray();
  }
}
