@page "/"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject DataService DS
@inject SessionData SD
@using BioMap

<Row Margin="Margin.Is1.OnY">
  <Column ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
    <Card>
      <CardHeader>
        <CardTitle Size="4">@Localize["Welcome to BioMap!"]</CardTitle>
      </CardHeader>
      <CardImage Source="images/TitlePage.jpg" />
      <CardBody>
        <p>@Localize["BioMap helps monitor yellow-bellied toads."]</p>
      </CardBody>
    </Card>
  </Column>
  <Column ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
    <p>
      @Localize["Intro1"]
    </p>
    <p>
      @Localize["Intro2"]
    </p>
    <p>
      @Localize["Intro3"]
    </p>
  </Column>
</Row>
<Row Margin="Margin.Is2.OnY">
  @if (SD.CurrentUser.Level < 200)
  {
    <Column>
      <Card>
        <CardHeader>
          <CardTitle>@Localize["Register"]</CardTitle>
        </CardHeader>
        <CardBody>
          <CardText>
            @Localize["You can look around the website without registration. However, you will only see alienated location coordinates. If you want to see unaltered data and participate in the project, you are welcome to register."]
          </CardText>
          <Button Color="Color.Primary" Clicked="@((e) => NavigationManager.NavigateTo("/Administration/UserMgt"))">@Localize["Register"]</Button>
        </CardBody>
      </Card>
    </Column>
  }
  <Column>
    <Card>
      <CardHeader>
        <CardTitle>@Localize["Project"]</CardTitle>
      </CardHeader>
      <CardBody>
        <p>
          @Localize["IntroProjectSelection"]
        </p>
        <Accordion>
          <Collapse Visible="@(collapseVisible=="SelectProject")">
            <CollapseHeader>
              <Heading Size="HeadingSize.Is5">
                <Button Color="Color.Light" Clicked="@(()=>collapseVisible="SelectProject")">@Localize["Select project"]</Button>
              </Heading>
            </CollapseHeader>
            <CollapseBody>
              <Select TValue="string" SelectedValue="@SD.CurrentUser.Project" SelectedValueChanged="@(async (e)=>{ await Project_SelectedValueChanged(e); })">
                @foreach (var sProject in DS.GetAllProjects())
                {
                  <SelectItem TValue="string" Value="@(sProject)">@sProject</SelectItem>
                }
              </Select>
            </CollapseBody>
          </Collapse>
          <Collapse Visible="@(collapseVisible=="CreateNewProject")">
            <CollapseHeader>
              <Heading Size="HeadingSize.Is5">
                <Button Color="Color.Light" Clicked="@(()=>collapseVisible="CreateNewProject")">@Localize["Create new project"]</Button>
              </Heading>
            </CollapseHeader>
            <CollapseBody>
              <p>
                @Localize["IntroCreateNewProject"]
              </p>
              <Validation Validator="@ValidateNewProjectName">
                <Row>
                  <Column>
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop" Float="Float.Right">@Localize["Project name"]: </FieldLabel>
                      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <TextEdit Placeholder="gbu-project-name" @bind-Text="NewProjectName">
                          <Feedback>
                            <ValidationError></ValidationError>
                          </Feedback>
                        </TextEdit>
                      </FieldBody>
                    </Field>
                  </Column>
                </Row>
                <Row>
                  <Column>
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop"></FieldLabel>
                      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
                        <Button Color="Color.Primary" Disabled="@(!NewProjectNameValid)" Clicked="@(async (e)=>{ await CreateNewProject_Clicked(); })">@Localize["Create new project"]</Button>
                      </FieldBody>
                    </Field>
                  </Column>
                </Row>
              </Validation>
            </CollapseBody>
          </Collapse>
        </Accordion>
      </CardBody>
    </Card>
  </Column>
</Row>

@code {
  private string collapseVisible = "SelectProject";
  //
  protected override Task OnInitializedAsync()
  {
    return base.OnInitializedAsync();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!DS.IsMigrationInProcess && firstRender)
    {
      bool bAnyChanged = false;
      try
      {
        SD.CurrentUser.Project = await JSRuntime.InvokeAsync<string>("getCookie", "Project");
        var sEMail = await JSRuntime.InvokeAsync<string>("getCookie", "UserId");
        var sUserId = sEMail.Trim().ToLowerInvariant();
        if (string.CompareOrdinal(sEMail, sUserId) != 0)
        {
          await JSRuntime.InvokeAsync<string>("setCookie", "UserId", sUserId);
          sEMail = sUserId;
        }
        if (string.CompareOrdinal(sEMail, SD.CurrentUser.EMail) != 0)
        {
          SD.CurrentUser.EMail = sEMail;
          bAnyChanged = true;
        }
        var sUserPermTicket = await JSRuntime.InvokeAsync<string>("getCookie", "UserPermTicket." + SD.CurrentUser.Project);
        var user = new User();
        DS.LoadUser(SD, sUserPermTicket, user);
        if (!object.Equals(user, SD.CurrentUser))
        {
          DS.LoadUser(SD, sUserPermTicket, SD.CurrentUser);
          bAnyChanged = true;
        }
      }
      catch { }
      if (bAnyChanged)
      {
        this.StateHasChanged();
      }
    }
  }
  private async Task Project_SelectedValueChanged(string sNewValue)
  {
    if (sNewValue == null)
    {
      sNewValue = "";
    }
    SD.CurrentUser.Project = sNewValue;
    await JSRuntime.InvokeAsync<string>("setCookie", "Project", sNewValue);
    NavigationManager.NavigateTo("/", true);
    SD.OnCurrentProjectChanged();
  }
  private string NewProjectName { get; set; } = "";
  private bool NewProjectNameValid = false;
  private void ValidateNewProjectName(ValidatorEventArgs e)
  {
    var sNewValue = e.Value as string;
    var lExistingProjects = new List<string>(DS.GetAllProjects());
    if (lExistingProjects.Contains(sNewValue))
    {
      e.Status = ValidationStatus.Error;
    }
    else if (!string.IsNullOrEmpty(sNewValue))
    {
      e.Status = ValidationStatus.Success;
    }
    this.NewProjectNameValid = (e.Status == ValidationStatus.Success);
  }
  private async Task CreateNewProject_Clicked()
  {
    DS.CreateNewProject(SD, this.NewProjectName);
    SD.CurrentUser.Project = this.NewProjectName;
    await JSRuntime.InvokeAsync<string>("setCookie", "Project", this.NewProjectName);
    NavigationManager.NavigateTo("/Administration/UserMgt", true);
  }
}
