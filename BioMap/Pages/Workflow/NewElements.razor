@page "/Workflow/NewElements"
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@inject NavigationManager NM
@inject DataService DS
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<Row Margin="Margin.Is1.OnY">
  <Column>
    @if (Element!=null) {
      <Blazor.ImageSurveyor.ImageSurveyor @ref="imageSurveyor" Style="height:90vh;" />
    }
    </Column>
  <Column ColumnSize="ColumnSize.Is3" Style="background-color: rgba(255,255,255,0.75);">
    <Row Margin="Margin.Is1.OnY">
      <Column>
        <UserFilter />
      </Column>
    </Row>
    <Row Margin="Margin.Is1.OnY">
      <Column>
        @Localize["Remaining elements"]: @RemainingElements
      </Column>
    </Row>
    <Row Margin="Margin.Is1.OnY">
      <Column>
        <Button Color="Color.Light" Clicked="@(async (e)=>{ await OnSelectPrev(); })" Block="true">
          <Icon Name="IconName.StepBackward"></Icon>
        </Button>
      </Column>
      <Column>
        <Button Color="Color.Light" Clicked="@(async (e)=>{ await OnSelectNext(true); })" Block="true" Disabled=@(Element!=null && Element.Classification.IsIdPhoto() && string.IsNullOrEmpty(Element?.GenderFeature))>
          <Icon Name="IconName.Save" />
          <Icon Name="IconName.StepForward" />
        </Button>
      </Column>
      <Column>
        <Button Color="Color.Light" Clicked="@(async (e)=>{ await OnSelectNext(false); })" Block="true">
          <Icon Name="IconName.StepForward"></Icon>
        </Button>
      </Column>
    </Row>
    <Divider />
    @if (Element!=null) {
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <a href="javascript:void(0);" @onclick="()=>ElementName_Click(Element)">
            <strong>@Element.ElementName</strong>
          </a><br />
          <Icon Name="IconName.LocationArrow" /> @Element.GetPlaceName()<br />
          <Icon Name="IconName.Clock" /> @Element.GetIsoDateTime()<br />
          <Icon Name="IconName.User" /> @Element.ElementProp.UploadInfo.UserId
        </Column>
      </Row>
      <Divider />
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
            <DropdownToggle Color="Color.Primary">
              @Localize[Element.Classification.ClassName]
            </DropdownToggle>
            <DropdownMenu>
              @foreach (var sClassName in ElementClassification.ClassNames) {
                <DropdownItem Clicked="@(async (e)=>await newClass_Selected(sClassName))">
                  @Localize[sClassName]
                </DropdownItem>
              }
            </DropdownMenu>
          </Dropdown>
        </Column>
      </Row>
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <Buttons>
            @if (string.CompareOrdinal(Element.Classification.ClassName,"Living being")==0) {
              <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                <DropdownToggle Color="Color.Primary">
                  @if (string.IsNullOrEmpty(Element.Classification.LivingBeing?.Species?.SciName)) {
                    @Localize["(select)"]
                  } else {
                    @Element.Classification.LivingBeing?.Species?.GetLocalizedName(SD.CurrentCultureName)
                  }
                </DropdownToggle>
                <DropdownMenu>
                  @foreach (var species in SD.CurrentProject.Species) {
                    <DropdownItem Active="(string.CompareOrdinal(Element.Classification.LivingBeing?.Species?.SciName,species.SciName)==0)"
                                  Clicked="@((e)=>Element.Classification.LivingBeing=new ElementClassification.LivingBeing_t { Species=SD.CurrentProject.GetSpecies(species.SciName) })">
                      @species.GetLocalizedName(SD.CurrentCultureName)
                    </DropdownItem>
                  }
                </DropdownMenu>
              </Dropdown>
              @if (!string.IsNullOrEmpty(Element.Classification?.LivingBeing?.Species?.SciName)) {
                <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                  <DropdownToggle Color="Color.Primary">
                    @Localize[Element.Classification.LivingBeing.Count.ToString()]
                  </DropdownToggle>
                  <DropdownMenu>
                    @foreach (var nCount in new int[] { 1,2,3,4,5,10,15,20,30,40,50,100,150,200,500,1000 }) {
                      <DropdownItem Active="(Element.Classification.LivingBeing.Count==nCount)"
                                    Clicked="@((e)=>{ Element.Classification.LivingBeing.Count=nCount; })">
                        @nCount.ToString()
                      </DropdownItem>
                    }
                  </DropdownMenu>
                </Dropdown>
                <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                  <DropdownToggle Color="Color.Primary">
                    @if (Element.Classification.LivingBeing.Stadium==(ElementClassification.Stadium)0) {
                      @Localize["(select)"]
                    } else {
                      @Localize[Element.Classification.LivingBeing.Stadium.ToString()]
                    }
                  </DropdownToggle>
                  <DropdownMenu>
                    @foreach (var enStadium in Enum.GetValues<ElementClassification.Stadium>()) {
                      <DropdownItem Active="(Element.Classification.LivingBeing.Stadium==enStadium)"
                                    Clicked="@((e)=>{ Element.Classification.LivingBeing.Stadium=enStadium; })">
                        @Localize[enStadium.ToString()]
                      </DropdownItem>
                    }
                  </DropdownMenu>
                </Dropdown>
              }
            }
            @if (string.CompareOrdinal(Element.Classification.ClassName,"Habitat")==0) {
              @if (Element.Classification.Habitat==null) {
                Element.Classification.Habitat=new ElementClassification.Habitat_t();
              }
              <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                <DropdownToggle Color="Color.Primary">
                  @Element.Classification.Habitat.GetQualityAsSymbols()
                </DropdownToggle>
                <DropdownMenu>
                  @foreach (var nQuality in new int[] { 1,2,3,4,5 }) {
                    <DropdownItem Active="(Element.Classification.Habitat.Quality==nQuality)"
                                  Clicked="@((e)=>{ Element.Classification.Habitat.Quality=nQuality; })">
                      @ElementClassification.Habitat_t.GetQualityAsSymbols(nQuality)
                    </DropdownItem>
                  }
                </DropdownMenu>
              </Dropdown>
              @if (SD.CurrentUser.MayChangeElements) {
                <CheckBox @bind-Checked="Element.Classification.Habitat.Monitoring" LabelText=@Localize["Monitoring"] />
              }
            }
          </Buttons>
        </Column>
      </Row>
      @if (Element!=null && Element.Classification.IsIdPhoto()) {
        <Row Margin="Margin.Is1.OnY">
          <Column>
            <Field Horizontal="true">
              <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is7.OnDesktop">
                @Localize["Gender features"]
                @if (!string.IsNullOrEmpty(Element.GetIId())) {
                  @(" ("+Element.Gender+")")
                }
              </FieldLabel>
              <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is5.OnDesktop">
                <Select TValue="string" @bind-SelectedValue="Element.GenderFeature">
                  <SelectItem TValue="string" Value="@("")">@Localize["Unknown"]</SelectItem>
                  <SelectItem TValue="string" Value="@("-")">@Localize["None"]</SelectItem>
                  @if (SD.CurrentProject.FemaleGenderFeatures) {
                    <SelectItem TValue="string" Value="@("f")">@Localize["Female"]</SelectItem>
                  }
                  @if (SD.CurrentProject.MaleGenderFeatures) {
                    <SelectItem TValue="string" Value="@("m")">@Localize["Male"]</SelectItem>
                  }
                </Select>
              </FieldBody>
            </Field>
          </Column>
        </Row>
      }
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <Field Horizontal="false">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Comment"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
              <MemoEdit @bind-Text="Element.ElementProp.UploadInfo.Comment" />
            </FieldBody>
          </Field>
        </Column>
      </Row>
      <Divider />
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <Button Color="@(Raw?Color.Light:Color.Primary)" Disabled="@(false)" Clicked="@(()=>{ Raw=!Raw; })" Block="true">
            <Icon Name="IconName.Crop" Float="Float.Left" />
            @Localize["Display normalized"]
          </Button>
        </Column>
      </Row>
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <Button Color="Color.Light" Disabled="@(!SD.CurrentUser.MayChangeElements)" Clicked="@(async (e)=>{ await ResetPositions_Clicked(Element); })" Block="true">
            <Icon Name="IconName.Clear" Float="Float.Left" />
            @Localize["Reset positions"]
          </Button>
        </Column>
      </Row>
      <Row Margin="Margin.Is1.OnY">
        <Column>
          <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">@Localize["Length"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is6.OnDesktop">
              <TextEdit Disabled="true" Text="@(ConvInvar.ToDecimalString(Element.ElementProp?.IndivData?.MeasuredData?.HeadBodyLength,1))" />
            </FieldBody>
          </Field>
        </Column>
      </Row>
      <Divider />
      <Row Margin="Margin.Is1.OnY">
        @if (!string.IsNullOrEmpty(PatternImgSrc)) {
          <Column ColumnSize="ColumnSize.Is4">
            <Image Source="@PatternImgSrc" Style="height:200px;" />
          </Column>
          <Column>
            <p>@Localize["Share of yellow"]: @(((1-ShareOfBlack)*100).ToString("0.0"))%</p>
            <p>@Localize["Asymmetry"]: @((CenterOfMass*100).ToString("0.0"))%</p>
            <p>@Localize["Standard deviation"]: @((StdDeviation*100).ToString("0.0"))%</p>
            <p>@Localize["Entropy"]: @((Entropy*100).ToString("0.0"))%</p>
          </Column>
        }
      </Row>
    }
  </Column>
</Row>

<PhotoPopup @ref="PhotoPopup1" />
