<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BioMap helps monitor yellow-bellied toads." xml:space="preserve">
    <value>Monitoring of a biological species. Identification of individuals by photos with GPS coordinates. Find a case description for yellow bellied toads in &lt;a href="help/Unkenprojekt_2019-2021.pdf" target="_blank"&gt;this presentation&lt;/a&gt;.</value>
  </data>
  <data name="DataUsage.DataStorage.Notice01" xml:space="preserve">
    <value>Project-related data is stored indefinitely. The user explicitly agrees to this when signing up to participate in a project. Reason: The integrity of the project data can only be guaranteed if all data is retained indefinitely or at least until the end of the project.</value>
  </data>
  <data name="DataUsage.DataStorage.Notice02" xml:space="preserve">
    <value>Deleting data is only possible by deleting the entire project. This can only be requested for valid reasons and must be initiated by the data protection officer.</value>
  </data>
  <data name="DataUsage.DataTypes.Notice01" xml:space="preserve">
    <value>The different types of data stored and processed on the server are: Image files, location data, documents, input values, automatically generated logs of modification and management operations, data for authentication and authorization of users. Technically necessary cookies are stored on the user's terminal device, which contain the user's authenticity and authorizations. No tracking data is stored.</value>
  </data>
  <data name="DataUsage.DataVisibility.Notice01" xml:space="preserve">
    <value>The project-related data is visible to all participants in the project. The location data is alienated for users with low access authorization, i.e. displayed at offset locations or not at all.</value>
  </data>
  <data name="DataUsage.Notice01" xml:space="preserve">
    <value>BioMap is a web portal in which several independent projects can be managed. In each project data of the users are processed and stored.</value>
  </data>
  <data name="DataUsage.Project.Notice01" xml:space="preserve">
    <value>A project involves the observation of a specific area over a period of time. A project can be created by anyone. He becomes the first project participant after verification of his email address and gets the high access level 700. With this he can give access levels to other users who create project information (area, locations, observed species, etc.). In the newly created project, only a maximum of 20 elements, typically images, can be uploaded for the time being. This quota can be changed only by the administrator of the portal.</value>
  </data>
  <data name="DataUsage.ProjectMembers.Notice01" xml:space="preserve">
    <value>Anyone can become a project participant who registers and verifies that they can receive an email at the specified address. With the registration he receives the lowest access level 100, with which only general information can be retrieved. Project participants with appropriate authorization can change the access level of the new participant.</value>
  </data>
  <data name="Description Numbers / Year of Birth Chart" xml:space="preserve">
    <value>The number of individuals caught at least once in a year, by year class (YoB, Year of Birth).</value>
  </data>
  <data name="Description_Recatch_by_Petersen" xml:space="preserve">
    <value>In the Petersen recapture method, catches are considered separately by location and calendar week. Population size N is calculated from two consecutive monitorings A and B: N = n * M / m, where n is the number of individuals and m is the number of recaptures in monitoring B, and M is the number of individuals in monitoring A. For each site, the population size in a given year is calculated as the maximum of all values in that year, and the total population size is calculated as the sum over all sites in that year. If there are no recaptures, the sum of the catches is used. If there is only one monitoring, the number of catches is used.</value>
  </data>
  <data name="ImpressumNotice01" xml:space="preserve">
    <value>This website is not commercial. It exclusively serves the workflows in nature conservation projects such as "Yellow-bellied toads in the Donaustaufer and Kreuther Forst".</value>
  </data>
  <data name="Intro1" xml:space="preserve">
    <value>BioMap is a web app that was (and continues to be) developed for a yellow-bellied toad monitoring project. Through individual detection, length measurement, and location recording, population size, age structure, sex ratio, migration activity, local distribution, and reproductive activity can be determined.</value>
  </data>
  <data name="Intro2" xml:space="preserve">
    <value>The data is largely collected using photographs with location data. For this purpose, yellow-bellied toads are photographed on site in a Petri dish in such a way that their abdominal pattern is visible. The images are then rotated in the web app and normalized using the known diameter of the petri dish to measure their head-torso length in the image. Their identity is then determined.</value>
  </data>
  <data name="Intro3" xml:space="preserve">
    <value>Multiple independent projects can be managed in the web app. Each project has its own user management, project area, data area for uploaded images and all other data. All data and images are visible to everyone except for the exact location data; this is removed from the images during upload and stored in a database. Only users with access level 400 or higher will see the exact location data, for all others it will be alienated.</value>
  </data>
  <data name="Intro4" xml:space="preserve">
    <value>The app is open source. The source code is hosted on &lt;a href="https://gitlab.com/f.x.haering/BioMap" target="_blank"&gt;https://gitlab.com/f.x.haering/BioMap&lt;/a&gt; and has MIT license.</value>
  </data>
  <data name="IntroCreateNewProject" xml:space="preserve">
    <value>You can create a new project here. Choose a name that clearly describes your project, preferably in the form "species-area", e.g. "gbu-oberhinkofen" for a project in which yellow-bellied toads are to be monitored in Oberhinkofen.</value>
  </data>
  <data name="IntroProjectSelection" xml:space="preserve">
    <value>You can select a project you are interested in here. You can also create a new project.</value>
  </data>
  <data name="Measure#To_measure_length" xml:space="preserve">
    <value>Measure</value>
  </data>
</root>