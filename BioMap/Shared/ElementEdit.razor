@inject DataService DS
@inject SessionData SD
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq


@if (Element != null)
{
  @if (hasPhoto)
  {
    <img src="api/photos/@Element.ElementName?Project=@SD.CurrentUser.Project" style="max-width:100%;max-height:100%;margin-top:3px;" />
    <table class="table table-sm">
      <tbody>
        <tr>
          <td>@Localize["Time"]</td>
          <td>@ConvInvar.ToString(Element.ElementProp.CreationTime)</td>
          <td>
            <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<600)" Clicked="@((e)=>{ Element.AdjustTimeFromPhoto(SD); })">@Localize["Adjust"]</Button>
          </td>
          <td>
            <Button Color="Color.Primary" Disabled="@(SD.CurrentUser.Level<600 || this.ElementDeleted == null)" Clicked="@((e)=>{ this.DeleteElement(this.Element); })"><Icon Name="IconName.Delete"></Icon></Button>
          </td>
        </tr>
      </tbody>
    </table>
  }
  else
  {
    <Field Horizontal="true">
      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Time"]</FieldLabel>
      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
        <DateEdit TValue="DateTime" @bind-Date="Element.ElementProp.CreationTime" ReadOnly="@(!Edit)" />
      </FieldBody>
    </Field>
  }
  <Field Horizontal="true" Margin="Margin.Is1.OnY">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Classification"]</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
      <Buttons>
        <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
          <DropdownToggle Color="Color.Primary">
            @Localize[Element.Classification.ClassName]
          </DropdownToggle>
          <DropdownMenu>
            @foreach (var sClassName in ElementClassification.ClassNames) {
      <DropdownItem Clicked="@((e)=>{ Element.Classification.ClassName=sClassName; })">
        @Localize[sClassName]
      </DropdownItem>}
          </DropdownMenu>
        </Dropdown>
        @if (string.CompareOrdinal(Element.Classification.ClassName,"Living being") == 0) {
          <TaxonDropDown @ref="this.taxonDropDown" IncludeCollections="@false" SelectedTaxonChanged="this.TaxonDropDown_SelectedTaxonChanged" Disabled="!SD.CurrentUser.MayChangeElements" />
          @if (!string.IsNullOrEmpty(Element.Classification?.LivingBeing?.Taxon?.SciName)) {
                      <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                        <DropdownToggle Color="Color.Primary">
                          @Localize[Element.Classification.LivingBeing.Count.ToString()]
                        </DropdownToggle>
                        <DropdownMenu>
                          @foreach (var nCount in new int[] { 1,2,3,4,5,10,15,20,30,40,50,100,150,200,500,1000 }) {
      <DropdownItem Active="(Element.Classification.LivingBeing.Count==nCount)"
                    Clicked="@((e)=>{ Element.Classification.LivingBeing.Count=nCount; })">
        @nCount.ToString()
      </DropdownItem>}
                        </DropdownMenu>
                      </Dropdown>
                                        <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                                          <DropdownToggle Color="Color.Primary">
                                            @if (Element.Classification.LivingBeing.Stadium == ElementClassification.Stadium.None) {
                      @Localize["(select)"] } else {
                      @Localize[Element.Classification.LivingBeing.Stadium.ToString()]}
                                          </DropdownToggle>
                                          <DropdownMenu>
                                            @foreach (var enStadium in Enum.GetValues<ElementClassification.Stadium>()) {
                      <DropdownItem Active="(Element.Classification.LivingBeing.Stadium==enStadium)"
                                    Clicked="@((e)=>{ Element.Classification.LivingBeing.Stadium=enStadium; })">
                        @Localize[enStadium.ToString()]
                      </DropdownItem>}
                                          </DropdownMenu>
                                        </Dropdown>}}
        @if (string.CompareOrdinal(Element.Classification.ClassName,"Habitat") == 0) {
      @if (Element.Classification.Habitat == null) {
        Element.Classification.Habitat = new ElementClassification.Habitat_t();
      }
                      <Dropdown Disabled="!SD.CurrentUser.MayChangeElements">
                        <DropdownToggle Color="Color.Primary">
                          @Element.Classification.Habitat.GetQualityAsSymbols()
                        </DropdownToggle>
                        <DropdownMenu>
                          @foreach (var nQuality in new int[] { 1,2,3,4,5 }) {
      <DropdownItem Active="(Element.Classification.Habitat.Quality==nQuality)"
                    Clicked="@((e)=>{ Element.Classification.Habitat.Quality=nQuality; })">
        @ElementClassification.Habitat_t.GetQualityAsSymbols(nQuality)
      </DropdownItem>}
                        </DropdownMenu>
                      </Dropdown>
                                      @if (SD.CurrentUser.MayChangeElements) {
                      <CheckBox @bind-Checked="Element.Classification.Habitat.Monitoring" LabelText=@Localize["Monitoring"] />}}
      </Buttons>
    </FieldBody>
  </Field>
  <Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Comment"]</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
      <MemoEdit @bind-Text="Element.ElementProp.UploadInfo.Comment" ReadOnly="@(!Edit)" />
    </FieldBody>
  </Field>
  @if (Element.HasIndivData())
  {
    <Field Horizontal="true">
      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Gender"]</FieldLabel>
      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
        <Select @bind-SelectedValue="Element.Gender" Disabled="@(!Edit)">
          <SelectItem TValue="string" Value="@("")">@Localize["Unknown"]</SelectItem>
          <SelectItem TValue="string" Value="@("j")">@Localize["Other"]</SelectItem>
          <SelectItem TValue="string" Value="@("f")">@Localize["Female"]</SelectItem>
          <SelectItem TValue="string" Value="@("m")">@Localize["Male"]</SelectItem>
        </Select>
      </FieldBody>
    </Field>
    <Field Horizontal="true">
      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">IId</FieldLabel>
      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
        <NumericEdit @bind-Value="Element.ElementProp.IndivData.IId" Disabled="@(!Edit)" />
      </FieldBody>
    </Field>
  }
  {
    <Field Horizontal="true">
      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Place"]</FieldLabel>
      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
        <Select
          TValue="string"
          SelectedValue="this.Element.GetPlaceName()"
          SelectedValueChanged="(value)=>this.SD.SetPlace(this.Element, value)"
          Disabled="this.Edit && !this.SD.CurrentUser.MayChangeElementPlace(this.Element)"
          >
          @foreach (var sPlaceName in this.DS.GetPlaces(this.SD).Select(p=>p.Name).Append(""))
          {
            <SelectItem TValue="string" Value="sPlaceName">@sPlaceName</SelectItem>
          }
        </Select>
      </FieldBody>
    </Field>
  }
}
<table class="table table-sm">
  <tbody>
    @foreach (var p in Properties)
    {
      <tr>
        <td>@((MarkupString)p[0])</td>
        <td>@((MarkupString)p[1])</td>
      </tr>
    }
  </tbody>
</table>

@code{
  //
      }
