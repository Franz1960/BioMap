@inject DataService DS
@inject SessionData SD
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq


@if (Element!=null) {
  @if (hasPhoto) {
    <img src="api/photos/@Element.ElementName?Project=@SD.CurrentUser.Project" style="max-width:100%;max-height:100%;margin-top:3px;" />
  } else {
    <Field Horizontal="true">
      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Time"]</FieldLabel>
      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
        <DateEdit TValue="DateTime" @bind-Date="Element.ElementProp.CreationTime" ReadOnly="@(!Edit)" />
      </FieldBody>
    </Field>
  }
  <Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Cat."]</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
      <Select @bind-SelectedValue="Element.ElementProp.MarkerInfo.category" Disabled="@(!Edit)">
        @foreach (var category in Element.Category.AllCategories) {
<SelectItem Value="category.Num">
  @category.Num - @category.Name
</SelectItem>
}
      </Select>
    </FieldBody>
  </Field>
  <Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Classification"]</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
      <Buttons>
        <Dropdown>
          <DropdownToggle Color="Color.Primary">
            @Localize[Element.Classification.ClassName]
          </DropdownToggle>
          <DropdownMenu>
            @foreach (var sClassName in ElementClassification.ClassNames) {
              <DropdownItem Clicked="@((e)=>{ Element.Classification.ClassName=sClassName; })">
                @Localize[sClassName]
              </DropdownItem>
            }
          </DropdownMenu>
        </Dropdown>
        @if (string.CompareOrdinal(Element.Classification.ClassName,"Living being")==0) {
          <Dropdown>
            <DropdownToggle Color="Color.Primary">
              @if (string.IsNullOrEmpty(Element.Classification.LivingBeing?.Species?.SciName)) {
                @Localize["(select)"]
              } else {
                @Element.Classification.LivingBeing?.Species?.GetLocalizedName(SD.CurrentCultureName)
              }
            </DropdownToggle>
            <DropdownMenu>
              @foreach (var species in SD.CurrentProject.Species) {
                <DropdownItem Active="(string.CompareOrdinal(Element.Classification.LivingBeing?.Species?.SciName,species.SciName)==0)"
                              Clicked="@((e)=>Element.Classification.LivingBeing=new ElementClassification.LivingBeing_t { Species=SD.CurrentProject.GetSpecies(species.SciName) })">
                  @species.GetLocalizedName(SD.CurrentCultureName)
                </DropdownItem>
              }
            </DropdownMenu>
          </Dropdown>
          @if (!string.IsNullOrEmpty(Element.Classification?.LivingBeing?.Species?.SciName)) {
            <Dropdown>
              <DropdownToggle Color="Color.Primary">
                @Localize[Element.Classification.LivingBeing.Count.ToString()]
              </DropdownToggle>
              <DropdownMenu>
                @foreach (var nCount in new int[] { 1,2,3,4,5,10,15,20,30,40,50,100,150,200,500,1000 }) {
                  <DropdownItem Active="(Element.Classification.LivingBeing.Count==nCount)"
                                Clicked="@((e)=>{ Element.Classification.LivingBeing.Count=nCount; })">
                    @nCount.ToString()
                  </DropdownItem>
                }
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownToggle Color="Color.Primary">
                @if (Element.Classification.LivingBeing.Stadium==(ElementClassification.Stadium)0) {
                  @Localize["(select)"]
                } else {
                  @Localize[Element.Classification.LivingBeing.Stadium.ToString()]
                }
              </DropdownToggle>
              <DropdownMenu>
                @foreach (var enStadium in Enum.GetValues<ElementClassification.Stadium>()) {
                  <DropdownItem Active="(Element.Classification.LivingBeing.Stadium==enStadium)"
                                Clicked="@((e)=>{ Element.Classification.LivingBeing.Stadium=enStadium; })">
                    @Localize[enStadium.ToString()]
                  </DropdownItem>
                }
              </DropdownMenu>
            </Dropdown>
          }
        }
        @if (string.CompareOrdinal(Element.Classification.ClassName,"Habitat")==0) {
          @if (Element.Classification.Habitat==null) {
            Element.Classification.Habitat=new ElementClassification.Habitat_t();
          }
          <Dropdown>
            <DropdownToggle Color="Color.Primary">
              @Element.Classification.Habitat.GetQualityAsSymbols()
            </DropdownToggle>
            <DropdownMenu>
              @foreach (var nQuality in new int[] { 1,2,3,4,5 }) {
                <DropdownItem Active="(Element.Classification.Habitat.Quality==nQuality)"
                              Clicked="@((e)=>{ Element.Classification.Habitat.Quality=nQuality; })">
                  @ElementClassification.Habitat_t.GetQualityAsSymbols(nQuality)
                </DropdownItem>
              }
            </DropdownMenu>
          </Dropdown>
          <CheckBox @bind-Checked="Element.Classification.Habitat.Monitoring" LabelText=@Localize["Monitoring"] />
        }
      </Buttons>
    </FieldBody>
    </Field>
    <Field Horizontal="true">
      <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Comment"]</FieldLabel>
      <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
        <MemoEdit @bind-Text="Element.ElementProp.UploadInfo.Comment" ReadOnly="@(!Edit)" />
      </FieldBody>
    </Field>
    @if (Element.HasIndivData()) {
      <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">@Localize["Gender"]</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
          <Select @bind-SelectedValue="Element.ElementProp.IndivData.Gender" Disabled="@(!Edit)">
            @foreach (var gender in new[] { "ma","fa","j","j0","j1","j2" }) {
    <SelectItem Value="gender">@gender</SelectItem>
}
          </Select>
        </FieldBody>
      </Field>
      <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">IId</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
          <NumericEdit @bind-Value="Element.ElementProp.IndivData.IId" Disabled="@(!Edit)" />
        </FieldBody>
      </Field>
    }
  }
      <table class="table">
        <tbody>
          @foreach (var p in Properties) {
            <tr>
              <td>@((MarkupString)p[0])</td>
              <td>@((MarkupString)p[1])</td>
            </tr>
          }
        </tbody>
      </table>

      @code{
        //
      }