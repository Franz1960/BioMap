@inject Microsoft.Extensions.Localization.IStringLocalizer<App> Localize
@using Microsoft.AspNetCore.Components.Forms
@inject SessionData SD
@inject IJSRuntime JSRuntime
@using BioMap

<Row>
  <span style="padding-left: 40px;"></span>
  @if (this.AreaMap != null)
  {
    <span style="margin-right: 12px;">
      <Button Size="Blazorise.Size.Small" Color="Color.Primary" Clicked="async ()=>await this.AreaMap.FitBounds()">
        <Icon Name="IconName.Expand"></Icon>
        @Localize["Fit visible area"]
      </Button>
    </span>
    <span style="margin: auto 12px auto 0px;border-left-style: hidden;border-width: thin;padding-left: 5px;">
      <CheckBox Checked="this.AreaMap.ShowCustomMap" CheckedChanged="@((e)=>{ this.AreaMap.SetShowCustomMap(e); })" LabelText=@Localize["Show custom map"] />
    </span>
    <span style="margin: auto 5px auto 0px;border-left-style: solid;border-width: thin;padding-left: 5px;">
      @Localize["Places"]:
    </span>
    <span style="margin: auto 12px auto 0px;border-left-style: hidden;border-width: thin;padding-left: 5px;">
        <RadioGroup TValue="int" CheckedValue="this.AreaMap.ShowPlaces" CheckedValueChanged="@((e)=>{ this.AreaMap.SetShowPlaces(e); })">
        <Radio TValue="int" Value="@(0)">@Localize["No"]</Radio>
        <Radio TValue="int" Value="@(1)">@Localize["Yes"]</Radio>
        <Radio TValue="int" Value="@(2)">@Localize["Monitoring"]</Radio>
      </RadioGroup>
    </span>
    @if (this.ElementMap != null)
    {
      <span style="margin: auto 12px auto 0px;border-left-style: solid;border-width: thin;padding-left: 5px;">
        <CheckBox Checked="this.ElementMap.DynaZoomed" CheckedChanged="(e)=>this.ElementMap.SetDynaZoomed(e)" LabelText=@Localize["Dyn. zoom"] />
      </span>
    }
    @if (this.ShowConnectorSwitch)
    {
      <span style="margin: auto 12px auto 0px;border-left-style: solid;border-width: thin;padding-left: 5px;">
        <RadioGroup TValue="int" CheckedValue="SD.CurrentUser.Prefs.DisplayConnectors" CheckedValueChanged="(e)=>{ SD.CurrentUser.Prefs.DisplayConnectors=e; SD.DS.WriteUser(SD,SD.CurrentUser); this.DisplayConnectorsChanged.InvokeAsync(e); this.AreaMap.Invalidate(); }">
          @Localize["Show movements"]:
          <Radio TValue="int" Value="@(0)">@Localize["No"]</Radio>
          <Radio TValue="int" Value="@(1)">@Localize["Most recent"]</Radio>
          <Radio TValue="int" Value="@(2)">@Localize["All"]</Radio>
        </RadioGroup>
      </span>
    }
  }
</Row>

@code {
  [Parameter]
  public AreaMap AreaMap
  {
    get => this._AreaMap;
    set
    {
      if (value != this._AreaMap)
      {
        this._AreaMap = value;
        this.ElementMap = value as ElementMap;
      }
    }
  }
  private AreaMap _AreaMap = null;
  private ElementMap ElementMap { get; set; }
  [Parameter]
  public bool ShowConnectorSwitch { get; set; } = false;
  [Parameter]
  public EventCallback<int> DisplayConnectorsChanged { get; set; }
}
